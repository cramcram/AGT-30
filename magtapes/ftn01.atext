[ FORTRAN
[ ADAGE EXTENDED FORTRAN IV COMPILER FOR AGT AMOS/2 DISK SYSTEMS
[ R.A.F., H.D.K.

[ REV. D,  1 JAN 73   (1ST OFFICIAL CUSTOMER RELEASE, HAS FULL DATA STATEMENT)
[ REV. C, 18 DEC 72   (NUMEROUS CORRECTIONS, UNRELEASED)
[ REV. B,  7 NOV 72   (FIRST FULL INTERNAL RELEASE)
[ REV. A, 24 SEP 72   (PRELIMINARY INTERNAL RELEASE)

[ PLACE CURRENT REVISION LEVEL AND DATE IN PASS 1 TYPEOUT BELOW AND IN
[   STANDARD SOURCE LISTING TITLES ON PAGE 3

[ *** NOTE ***
[   DUE TO THE SIZE OF THIS PROGRAM, ADEPT VERSION 3, (SIMPLIFIED ADEPT
[   ASSEMBLER), MUST BE USED TO ASSEMBLE ON 16K SYSTEMS.  HENCE, NO ADEPT
[   STRING ACTION OPERATORS, (MACRO'S, IREPEAT'S, ETC.), MAY APPEAR IN THIS
[   TEXT.  ON 32K SYSTEMS, ASSEMBLY TIME WILL BE SHORTENED CONSIDERABLY IF
[   ADEPT VERSION 3 IS USED.

EXPUNGE

            TITLE         FORTRAN


[ CONDITIONAL VERSION DEFINITION ...

IFPASS1
TYPEOUT '
ASSEMBLY OF AMOS/2 FORTRAN COMPILER (REV. D, 1 JAN 73) ...

  VERSION 1 - FOR 32K DISK SYSTEMS
  VERSION 2 - FOR 16K DISK SYSTEMS

TYPE IN VERSION NUMBER, C/R ... '

VERSION = TYPEIN

V1 = VERSION'1[VERSION 1 FLAG
V2 = VERSION'2[VERSION 2 FLAG

IFZERO  V1*V2
ELSE
TYPEOUT '
ILLEGAL VERSION SPECIFIED.'
STOP
ENDC

ELSE

VERSION = VERSION[DEFINE OUTPUT VERSION NO. IN PASS 2

ENDC


[ ENTRY POINTS

            ENTRY         FORTRAN         [MAIN COMPILER ENTRY
            ENTRY         FORTRANS        [SINGLE-COMPILATION ENTRY
            ENTRY         FORTMAP         [OUTPUT SYMBOLS MAP ENTRY
            ENTRY         FORTSYMS        [OUTPUT RLSYM SYMBOLS ENTRY

            ENTRY         LISTFLAG        [LISTING OUTPUT MODE FLAG
            ENTRY         MAPFLAG         [SYMBOLS MAP FLAG
            ENTRY         SYMSFLAG        [RLSYM OUTPUT FLAG

            ENTRY         EXTRACORE       [EXTRA CORE AFTER TABLE ALLOCATION
            ENTRY         DPR4FLAG        [DPR4 PROCESSOR FLAG (FOR OBJCT CODE)
            ENTRY         OTSERFLAG       [OTS ERROR SUPPORT FLAG
            ENTRY         SHORTFLAG       [SHORT INTEGER MODE FLAG
            ENTRY         OFLOWFLAG       [ARITHMETIC OVERFLOW ERROR FLAG
            ENTRY         SUBSFLAG        [OBJECT-TIME SUBSCRIPT CHECKING FLAG


[ MNEMONIC LISTING DEVICE PIVOT PARAMETERS

OCHPV = 70000             [OUTPUT AMOS CHAR (CALLED FROM $OCH)
PAGPV = 70001             [OUTPUT PAGE
UNSPV = 70002             [UNSELECT LISTING DEVICE
TABPV = 70003             [TAB TO COLUMN POSITION
ASCPV = 70004             [OUTPUT ASCII CHARACTER
LINPV = 70005             [OUTPUT LINE (NO PAGING)
HLTPV = 70006             [HALT DEVICE
CHCPV = 70007             [CHARACTER COUNTER
LNCPV = 70010             [LINE COUNTER
MXLPV = 70011             [MAXIMUM LINES PER PAGE
BSYPV = 70012             [REAL-TIME DEVICE BUSY FLAG


[ MISCELLANEOUS PARAMETERS

AROPV = 77771             [ARITHMETIC OVERFLOW PIVOT
LLEVS = 8.                                [MAXIMUM LITERAL PUSH-DOWN LEVELS
LAPDL = 8.                                [MAX ADEPT SUB-EXPR PUSH-DOWN LEVELS
OSTKL = 200                               [OPERATOR PUSH-DOWN STACK LENGTH
LSERS = 30                                [MAXIMUM ERRORS PER LISTING LINE

JUMP1 = 01000!H'JUMP      [JUMP TO OVERLAY NO. 1 (FOVRLY ARG)
JUMP2 = 02000!H'JUMP      [JUMP TO OVERLAY NO. 2 (FOVRLY ARG)
JUMP3 = 03000!H'JUMP      [JUMP TO OVERLAY NO. 3 (FOVRLY ARG)


[           *****  START OF RESIDENT SECTION CODING  *****




[ STANDARD TITLE FOR FORTRAN SOURCE PROGRAM LISTINGS
[   (REVSION AND DATE SHOULD HAVE FORM, "REV. X, DA MON YR")

STITL:

IFZERO V1,  STRING 'ADAGE FORTRAN IV (VERS. 1, REV. D, 1 JAN 73)'
ELSE        STRING 'ADAGE FORTRAN IV (VERS. 2, REV. D, 1 JAN 73)'  ENDC

STITE:
STITC = 45.                               [NO. OF CHARACTERS IN STANDARD TITLE



[ COMPILER ARGUMENT FLAGS AND CONTROL OPTION ENTRY-POINTS

LISTFLAG:                 2               [LISTING OUTPUT ARG (LONG ERRORS)
MAPFLAG:                  1               [SYMBOLS MAP ARG (NO MAP)
SYMSFLAG:                 1               [RLSYM OUTPUT ARG (NO RLSYM FILE)

DPR4FLAG:                 0               [DPR4 FLAG (COMPILE FOR DPR2)
OTSERFLAG:                -2              [STD OTS ERROR SUPPORT (LONG ERRORS)
SHORTFLAG:                -0              [INTEGER ARITHMETIC MODE (SHORT)
OFLOWFLAG:                0               [ARITHMETIC OVERFLOW ERRORS (OFF)
SUBSFLAG:                 0               [OBJECT-TIME SUBSCRIPT CHECKS (OFF)

EXTRACORE:                100             [FREE CORE TO LEAVE FOR USER TYPEINS



[ READ START OF NEXT FORTRAN CARD TO DETERMINE ITS TYPE
[   RETURNS ...
[     (1)  COMMENT, CONTROL, ADEPT, END-OF-TEXT, OR NEXT INITIAL FORTRAN CARD
[          WITH DISPATCH TO PROCESSOR IN RCDRT
[     (2)  CONTINUATION CARD

RCDRT:      JUMP          NEWCD           [PROCESSING ROUTINE DISPATCH RETURN

RCD:        JUMP          .               [ENTRY
            JPSR          STCRD           [START NEW CARD
            ARXO'F                        [CLEAR ...
            ARMD          FCDFG           [  "F" CARD FLAG
            ARMD          ACDFG           [  "A" CARD FLAG
            ARMD          ADPTF           [  ADEPT MODE FLAG

            MDAR'F        LBLBF-1         [SETUP PTR TO STATEMENT LABEL BUFFER
            ARMD          RCD99
            MDAR'F        5               [SETUP CNT FOR 5 CHARS IN LABEL FIELD
            ARMD'N        RCD98

            JPSR          GCCF            [GET FIRST CARD CHARACTER ...
            JUMP          ETXCD           [  IF EOT, SET DISPATCH AND RETURN
            JUMP          RCD3            [  C/R, END OF CARD
            JUMP          RCD2            [  SKIP IF BLANK CHARACTER

            JPSR          DSPCH           [ELSE, CHECK FOR SPECIAL DISPATCH ...
            ]C!H          CMTCD           [  "C", COMMENT CARD
            ]F!H          CTLCD           [  "F", CONTROL CARD
            ]L!H          CTLCD           [  "L", CONTROL CARD
            ]A!H          ADPCD           [  "A", ADEPT CARD
            ]$!H          CMTCD           [  "$", COMMENT CARD
            ]*!H          CMTCD           [  "*", COMMENT CARD
            00!H          CMTCD           [  LEFT BRACKET, COMMENT CARD
            -0                            [  (END OF DISPATCH LIST)

            ARMD'O        GCCSV           [OTHER, SET TO RE-READ CHARACTER

RCD1:       JPSR          GCC             [GET NEXT CARD CHARACTER ...
            JUMP          RCD3            [  C/R, END OF CARD
            JUMP          .+2             [  SKIP IF BLANK
            ARMD'I'X      RCD99           [  ELSE, SAVE CHAR IN LABEL BUFFER

RCD2:       MDAR'X'N      RCD98           [LABEL FIELD DONE ?
            JPLS          RCD1            [NO, LOOP FOR NEXT CHAR

            JPSR          GCC             [YES, GET NEXT CHAR (COLUMN 6) ...
RCD3:       ARMD'O        GCCSV           [  C/R, SET TO RE-READ, TREAT AS SPC
            JUMP          RCD4            [  JUMP IF BLANK (INITIAL CARD)

            MDXO'F        ]0              [ZERO CHARACTER ?
            JPLS          RCD5            [NO, CONTINUATION, JUMP TO RETURN

RCD4:       ARMD'O'I'X    RCD99           [NEW STMNT, SET END OF LABEL BUFFER
            JUMP          NXTCD           [GO SET NEW CARD DISPATCH AND RETURN

RCD5:       JPSR          LSTER           [CONTINUATION, LIST ERRS ON LAST CARD
            ARMD'O        LBLBF           [SET NO STATEMENT LABEL ON CARD
            MDIR'X        RCD             [RETURN (2) FOR CONTINUATION CARD

RCD99:                    0               [TEMP STORAGE
RCD98:                    0               [TEMP STORAGE

LBLBF:      LOC           .+5             [STATEMENT LABEL BUFFER (COLS 1-TO-5)
                          -0              [END OF LABEL BUFF FLAG


[ START READING NEW CARD

STCRD:      JUMP          .               [ENTRY
            JPSR          LSTLN           [LIST PREVIOUS LINE
            ARMD'O        NEWCF           [SET NEW CARD FLAG
            MDAR          COLS            [SAVE COLUMN NO. FOR ERROR REPORTING
            ARMD          SCOLS
.PRIOP:     MDAR          $PRIOP          [ALSO CURRENT PAGE NO.
            ARMD          SPAGE
.PRIOL:     MDAR          $PRIOL          [AND CURRENT LINE NO.
            ARMD          SLINE
            MDIR          STCRD           [RETURN


[ PROCESS COMMENT CARD ...

CMTCD:      JPSR          RCDRT           [RETURN AND SET NEW CARD DISPATCH
            JPSR          LSTER           [LIST ERRORS ON LAST LINE
            ARMD'O        TAB7F           [SET FOR TAB TO COL 7 ONLY


[ SKIP TO END OF CARD ...

SKPCD:      JPSR          GCC             [GET NEXT CARD CHARACTER ...
            JUMP          NEWCD           [  IF C/R, GO READ NEXT CARD
            JUMP          SKPCD           [  IF BLANK OR TAB, IGNORE
            JUMP          SKPCD           [  IF OTHER, IGNORE


[ ABORT CARD SCAN ...

ABTCD:      MDAR          NEWCF           [NEW CARD PENDING ?
            ANIR          RCDRT           [YES, DISPATCH TO PROCESS IT
            JUMP          SKPCD           [ELSE, JUMP TO SKIP CARD


[ READ NEW FORTRAN CARD ...

NEWCD:      JPSR          RCD             [READ START OF NEXT CARD
            MDIR          RCDRT           [DISPATCH TO PROCESS IF NEW CARD

            JPSR          ERROR           [ELSE, WARNING ERROR (ABORTS CARD)
                          ER5             [  (ILLEGAL CONTINUATION CARD)


[ PROCESS NEXT FORTRAN STATEMENT ...

NXTCD:      JPSR          RCDRT           [RETURN FROM RCD AND SET DISPATCH
            JPSR          LSTER           [LIST ERRORS ON LAST CARD



[ COMPUTE AND SAVE STATEMENT LABEL ...

NXTC1:      ARMD'O        LABEL           [SET NO STATEMENT LABEL
            MDAR          LBLBF           [ANY LABEL ON THIS CARD ?
            JPAN          SCAN            [NO, JUMP TO START STATEMENT SCAN

            ARMD'O        TEM2            [ELSE, INITIALIZE LABEL VALUE
            MDAR'F        LBLBF-1         [SETUP POINTER TO LABEL BUFFER
            ARMD          TEM1

NXTC2:      MDAR'I'X      TEM1            [FETCH NEXT CHAR IN STATEMENT LABEL
            ARMD'O        LBLBF           [SET NO LABEL FOR NEXT STMNT ON CARD
            JPAN          NXTC4           [JUMP ON END OF LABEL FIELD

            MDXO          C20             [GET DIGIT VALUE
            ARMD          TEM3            [SAVE
            MDAS'F'N      9.              [NUMERIC ?
            JPAN          NXTC3           [YES, SKIP

            JPSR          ERROR           [NO, REPORT ILLEGAL CHAR IN LABEL
                          ER6
            JUMP          SCAN            [AND IGNORE LABEL

NXTC3:      MDAR          TEM2            [FETCH LABEL VALUE
            MPYI          5               [MULTIPLY * 10.
            NOOP
            MDAS          TEM3            [ADD NEW DIGIT
            ARMD          TEM2            [SAVE NEW LABEL VALUE
            JUMP          NXTC2           [LOOP FOR NEXT DIGIT

NXTC4:      MDAR          TEM2            [LABEL VALUE ZERO ?
            JPAN          NXTC5           [YES, JUMP FOR ERROR

            JPSR          STLBL           [ELSE, STORE LABEL IN LABEL TABLE
            ARMD          LABEL           [SAVE POINTER TO TABLE ENTRY

            MDAR'I'K      LABEL           [LABEL PREVIOUSLY DEFINED ?
            ANIR          NXTC1           [YES, SET NO STATEMENT LABEL
            JSAN          ERROR           [AND REPORT WARNING ERROR
                          ER9             [  (DUPLICATE LABEL)
            JUMP          SCAN            [GO START STATEMENT SCAN

NXTC5:      JPSR          ERROR           [WARNING ERROR
                          ER7             [  (ZERO STATEMENT LABEL)


[ START SCANNING NEW FORTRAN STATEMENT ...

SCAN:       JPSR          SCANI           [INITIALIZE FOR STATEMENT SCAN
            JPSR          EMITI           [INITIALIZE FOR EXEC CODE EMISSION
            ARXO'F                        [CLEAR ...
            ARMD          TYPEF           [  TYPE STATEMENT FLAG
            ARMD          ICALF           [  INTRINSIC SUBROUTINE CALL FLAG
            ARMD          DOSFG           [  DO STATEMENT FLAG
            ARMD          SREFG           [  SINGLE REF FLAG FOR POLISH
            ARMD          EQUSF           [  ASSIGNMENT FLAG FOR POLISH
            ARMD          CALLF           [  CALL STATEMENT FLAG FOR POLISH
            ARMD          DISPF           [  DISPLAY STATEMENT FLAG FOR POLISH
            ARMD          SCFLG           [  SPECIAL STRING CONSTANT FLAG

            JPSR          GCST            [SCAN TO 1ST NON-BLANK CHAR ON LINE
            JUMP          SCAN7           [  JUMP IF C/R

            MDXO'F        13              [IS IT DOUBLE-QUOTE ?
            JPLS          SCANK           [NO, GO GET KEYWORD

            MDAR'N        DATAF           [DATA2D/3D MODE ?
            JPAN          ILGCH           [NO, ILLEGAL CHARACTER

            MDAR'F        7               [YES, SETUP FLAG FOR ASCII STRING
            ARMD'H        KEYFG           [  IN DATA2D/DATA3D MODE
            JUMP          DATDS           [GO PROCESS ASCII STRING


[ GET KEYWORD ...

SCANK:      ARMD'O        GCSSV           [SAVE CHARACTER
            ARMD'O        SCANF           [SET SCAN MODE FLAG
            JPSR          GSYMA           [GET ALPHAMERIC SYMBOL

            MDAR          SCHAR           [FETCH DELIMETER
            MDXO'F        ]=              [EQUAL SIGN ?
            JPLS          .+3             [NO, SKIP

SCAN1:      MDAR          KEYAS           [YES, FETCH FLAGS FOR ASSIGNMNT STMNT
            JUMP          SCAN8           [JUMP TO PROCESS

            MDXO'F        ]='],           [DELIMETER = COMMA ?
            JPLS          SCAN1A          [NO, SKIP

            ARMD          SCANF           [YES, CLEAR SCAN MODE FLAG
            MDAR'N        IFLAG           [IN AN "IF" STATEMENT ?
            JPAN          IF1             [YES, JUMP FOR 2- OR 3-BRANCH "IF"
            JUMP          ILGCH           [ELSE, ILLEGAL DELIMETER

SCAN1A:     MDXO'F        ],'](           [DELIMETER = LEFT PAREN ?
            MDAR'O'H      SYMB3           [AND NOT THREE-WORD SYMBOL ?
            ARMD          TEM1            [NO, SET FLAG
            JPLS          SCAN2           [AND GO LOOKUP IN KEYWORD TABLES

            JPSR          SURSYM          [YES, IS IT IN SYMBOL TABLE ?
            JUMP          SCAN2           [NO, GO CHECK IF KEYWORD

            MDAR          SMTYF           [YES, FETCH SYMBOL TYPE
            MDXO'F        2               [ARRAY ?
            JPLS          .+2             [NO, GO CHECK IF KEYWORD
            JUMP          SCAN1           [YES, ASSUME ASSIGNMENT STATEMENT

            MDAR          ONFLG           ["ON" STATEMENT ?
            JPAN          SCAN2           [NO, SKIP

            MDAR          SMTYF           [YES, FETCH SYMBOL TYPE
            MDXO'F        3               [FUNCTION REFERENCE ?
            JPLS          .+2             [NO, GO CHECK IF KEYWORD
            JUMP          SCAN1           [ELSE, LET ASSIGNMENT TAKE CARE OF IT

SCAN2:      JPSR          SURKEY          [LOOKUP IN KEYWORD TABLE
            JUMP          SCAN5           [SKIP IF NOT FOUND

SCAN3:      MDAR          TEM1            [DELIMETER = LEFT PAREN ?
            JPLS          SCAN4           [NO, JUMP TO PROCESS KEYWORD

            MDAR'I'N      BSURP           [YES, KEYWORD ALLOWS LEFT PAREN
            ARLS          3               [  AS DELIMETER ?
            JPAN          SCAN6           [NO, STATEMENT FUNCTION

SCAN4:      MDAR'I        BSURP           [FOUND, FETCH KEYWORD FLAGS
            JUMP          SCAN8           [JUMP TO PROCESS STATEMENT

SCAN5:      JPSR          SURINS          [INTRINSIC SUBROUTINE ?
            JUMP          .+2             [NO, SKIP
            JUMP          SCAN3           [YES, JUMP TO FETCH FLAGS

            MDAR'N        ONFLG           ["ON" STATEMENT ?
            JPAN          SCAN1           [YES, LET ASSIGNMENT HANDLE EXPRESS'N

            MDAR          TEM1            [NOT FOUND, DELIMETER = LEFT PAREN ?
            JPLS          KEYER           [NO, ERROR (KEYWORD NOT RECOGNIZED)

SCAN6:      MDAR          KEYAF           [YES, FETCH FLAGS FOR STMNT FUNCTION
            JUMP          SCAN8           [JUMP TO PROCESS STATEMENT FUNCTION

SCAN7:      MDAR          LABEL           [BLANK STATEMENT, ANY STMNT LABEL ?
            ANIR          RCDRT           [NO, DO NEXT CARD

            MDAR          KEYCF           [ELSE, FETCH "CONTINUE" STMNT FLAGS

SCAN8:      ARMD          KEYFG           [SAVE KEYWORD FLAGS AND DISPATCH ADDR
            JPAN          SCAN12          [JUMP TO DISPATCH IF PARTIAL KEYWORD

            ARAR'K'N'F                    [NOT A SUBPROGRAM HEADER KEYWORD ?
            MDXO'A        OPTFG           [AND OUTPUT NOT STARTED YET ?
            JSAN          SMAIN           [YES, START A MAIN PROGRAM


[ PERFORM GENERAL PRE-DISPATCH PROCESSING ...

            ARXO'F                        [CLEAR SCAN MODE
            ARMD          SCANF
            MDAR          IFLAG           [NOT AFTER A LOGICAL IF ?
            MDAR'A        ONFLG           [AND NOT AFTER AN "ON" STATEMENT ?
            ANIR          EROR6           [YES, CLEAR FIRST ERROR FLAG
            ANAR'X        STMCT           [AND INDEX STATEMENT COUNT

            MDAR'N        DATAF           [IN DATA2D/DATA3D DEFINITION ?
            JPAN          SCAN9           [NO, SKIP

            MDAR'H'N      KEYFG           [YES, FETCH KEYWORD FLAGS
            MDAR'A'F      20              [ALLOWED IN DATA DEFINITION ?
            JSLS          ERROR           [NO, FATAL ERROR
                          ER172           [  (ILLEGAL STATEMENT IN DATA DEF'N)
            JUMP          DATDS           [ELSE, OK, JUMP TO DATA DISPATCH

SCAN9:      MDAR'K        KEYFG           [LEGAL STATEMENT IN NORMAL AND IMAGE
            ARAR'B'F'N                    [  SUBPROGRAMS ?
            JPAN          SCAN15          [YES, SKIP

            MDAR          SBPTY           [NO, BLOCK DATA SUBPROGRAM ?
            JPAN          BKDER           [YES, ILLEGAL STATEMENT

            MDAR'K        KEYFG           [FETCH KEYWORD FLAGS
            ARLS          2               [SHIFT IN SUBPROGRAM TYPE BIT
            MDXO'N        IMGFG           [SAME AS CURRENT MODE ?
            JPAN          SCAN15          [YES, OK, SKIP

            MDAR          IMGFG           [NO, IMAGE MODE ?
            JSAN          ERROR           [YES, FATAL ERROR
                          ER155           [  (NOT ALLOWED IN IMAGE MODE)

            MDAR'N        ICALF           [ELSE, "CALL" OF INSTRINSIC SUB ?
            JSAN          ERROR           [NO, FATAL ERROR
                          ER156           [  (ONLY ALLOWED IN IMAGE MODE)

            ARMD'O        SYMSV           [YES, SAVE SYMBOL FOR RE-READ
            MDAR          KEYCL           [ASSUME NORMAL SUBROUTINE CALL
            ARMD          KEYFG           [AND SET KEYWORD FLAGS FOR IT

SCAN15:     MDAR'B        KEYFG           [EXECUTABLE STATEMENT ?
            JPAN          SCAN11          [YES, JUMP


[ PRE-PROCESS SPECIFICATION STATEMENT ...

IFZERO V2                                 [IN SEGMENTED COMPILER,
            MDAR'F        (JUMP1!H)       [  SETUP JUMP TO PROCESS IN
            ARMD          SCAN13          [    OVERLAY 1
ENDC
            MDAR          IFLAG           [AFTER LOGICAL IF ?
            MDAR'A        ONFLG           [OR AFTER AN "ON" STATEMENT ?
            JPAN          .+3             [NO, SKIP

            JPSR          ERROR           [ELSE, FATAL ERROR
                          ER171           [  (ILLEGAL SPEC STATEMENT)

            MDAR'B        KEYFG           [FETCH KEYWORD FLAGS
            ARAR'B'F                      [FORMAT STATEMENT ?
            MDAR'O        LABEL           [OR NO STATEMENT LABEL ON CARD ?
            JPAN          .+4             [YES, OK, SKIP

            JPSR          ERROR           [ELSE, WARNING ERROR
                          ER14            [  (STATEMENT CANNOT BE LABELLED)
            ARMD'O        LABEL           [SET NO STATEMENT LABEL

            MDAR'N        KEYFG           [FETCH KEYWORD FLAGS
            ARLS          4               [STATEMENT EMITS CODE ?
            JSAN          LSLOC           [NO, SAVE LOC COUNTER FOR LISTING
            JUMP          SCAN12          [JUMP TO DISPATCH


[ PRE-PROCESS EXECUTABLE STATEMENT ...

SCAN11:
IFZERO V2                                 [IN SEGMENTED COMPILER,
            MDAR'F        (JUMP2!H)       [  SETUP JUMP TO PROCESS IN
            ARMD          SCAN13          [    OVERLAY 2
ENDC
            MDAR          SBPTY           [BLOCK DATA SUBPROGRAM ?
BKDER:      JSAN          ERROR           [YES, ERROR (ABORTS CARD)
                          ER50            [  (ILLEGAL STATEMENT IN BLOCK DATA)

            MDAR          IFLAG           [AFTER LOGICAL IF ?
            MDAR'A        ONFLG           [OR AFTER "ON" STATEMENT ?
            JPAN          .+2
            JUMP          SCAN12          [SKIP IF YES

            JPSR          ALLOC           [PERFORM ANY PENDING SYMBOL ALLOCAT'N
            JPSR          DOHDR           [OUTPUT HEADER CODE IF PENDING
            MDAR          LABEL           [NO STATEMENT LABEL ?
            MDXO'A        FLOWF           [AND FLOW NOT SET ?
            JSAN          ERROR           [YES, WARNING ERROR
                          ER13            [  (STATEMENT SHOULD BE LABELLED)

[ DISPATCH TO PROCESSING ROUTINE ...

SCAN12:     MDAR          KEYFG           [PROCESSING ROUTINE IMPLEMENTED ?
            JPLS          .+3             [YES, SKIP

            JPSR          ERROR           [NO, ERROR (ABORTS CARD)
                          ER16            [  (COMPILER CAN'T HANDLE STATEMENT)
IFZERO V1
            JPAN          SCAN12A         [SKIP IF PARTIAL KEYWORD
ELSE        JPAN          SCAN14
ENDC
            ARAR'H'F                      [GET KEYWORD FLAGS
            MDAR'A'F      40              [SPECIAL INTRINSIC FUNCTION CALL ?
            JPLS          GRFSBX          [YES, JUMP TO PROCESS

SCAN12A:    MDAR'H        KEYFG           [ELSE, FETCH KEYWORD TABLE ENTRY
            MDAR'A'H      AMASK           [MASK DISPATCH ADDRESS
IFZERO V1
            MDAS'F        40              [FORM JUMP INSTRUCTION
            ARIR'H'F                      [JUMP TO PROCESS STATEMENT
ELSE
            MDAS          SCAN13          [FORM OVERLAY JUMP INSTRUCTION
            ARMD'H        .+2             [SAVE FOR OVERLAY LOADER
            JPSR          FOVRLY          [DISPATCH TO OVERLAY ROUTINE
SCAN13:     JUMP                          [OVERLAY NO. AND DISPATCH INSTR

SCAN14:     MDAR'A'L                      [IF PARTIAL KEYWORD, MASK DISPATCH
            37000!H       77777           [  ADDRESS AND OVERLAY NO.
            MDAR'O'H      C40             [FORM JUMP INSTRUCTION
            ARMD          SCAN13          [AND SAVE FOR OVERLAY LOADER
            ARAR'K'F                      [RESIDES IN RESIDENT ?
            MDAR'A'F      77
            JPLS          SCAN13-1        [NO, JUMP TO LOAD OVERLAY AND ENTER
            MDIR          SCAN13          [ELSE, JUST DISPATCH TO PROCESS
ENDC


[ INITIALIZE FOR STATEMENT SCAN

SCANI:      JUMP          .               [ENTRY
            ARXO'F                        [CLEAR ...
            ARMD          SCANF           [  SCAN MODE FLAG
            ARMD          HOLFG           [  HOLLERITH EXPANSION FLAG
            ARMD          GCSSV           [  SAVED STATEMENT CHARACTER FLAG
            ARMD          GCSHF           [  END OF CARD HOLLERITH FLAG
            ARMD          GCSPK           [  FORMAT PACKING HOOK
            ARMD          SYMSV           [  SAVED SYMBOL
            MDAR          JSGCS           [SETUP NORMAL GET CHARACTER CALL
            ARMD          GNUM3           [  IN GNUM ROUTINE
            MDIR          SCANI           [RETURN


[ INITIALIZE FOR EMISSION OF EXECUTABLE CODE

EMITI:      JUMP          .               [ENTRY
            ARXO'F                        [CLEAR ...
            ARMD          DFLBF           [  LABEL DEFINED
            ARMD          SETAM+1         [  SETAM HOOK
            ARMD'O        IFLAG           [SET NO LOGICAL IF
            ARMD'O        ONFLG           [SET NO "ON" STATEMENT
            MDAR          TEMDO           [RESET TEMP VARIABLE POINTER
            ARMD          TEMPT           [  TO MARK AT TOP OF LAST DO LOOP
            MDAR          HFREP           [EMPTY POLISH STACK
            ARMD          PFREP
            MDIR          EMITI           [RETURN


[ CALL STATEMENT PRE-PROCESSOR ...

CALLP:      JPSR          BLSKP           [SKIP DELIM IF BLANK
            ARXO'F                        [RESET SCAN MODE
            ARMD          SCANF
            JPSR          GSYMA           [GET "CALLED" SYMBOL
            MDAR          SYMBF           [ANY PREFIX ?
            JPLS          CALP1           [YES, SKIP

            JPSR          SURSYM          [SEARCH FOR SYMBOL IN SYMBOL TABLE
            JUMP          CALP2           [SKIP IF NOT FOUND

            MDAR          SMTYF           [FOUND, TYPE UNKNOWN ?
            LSXO          C4              [OR SUBROUTINE ?
            JPLS          CALP2           [NO, MUST BE INSTRINSIC KEYWORD

CALP1:      ARMD'O        SYMSV           [ELSE, SAVE SYMBOL
            MDAR          KEYCL           [FETCH CALL STATEMENT FLAGS
            JUMP          SCAN8           [JUMP BACK INTO SCAN

CALP2:      JPSR          SURINS          [INSTRINSIC SUBROUTINE ?
            JUMP          CALP1           [NO, MUST BE SUBROUTINE

            ARMD'O        SCANF           [YES, SET SCAN MODE AGAIN
            ARMD'O        ICALF           [SET INTRINSIC SUB CALLED FLAG
            JUMP          SCAN4           [JUMP BACK TO PROCESS KEYWORD


[ PROCESS END OF TEXT ...

ETXCD:      JPSR          RCDRT           [RETURN AND SET NEXT CARD DISPATCH

ETXC1:      MDAR'N        OPTFG           [OUTPUT STARTED ?
            JSAN          ERROR           [NO, ERROR (TERMINAL)
                          ER57            [  (NO STATEMENTS IN SUBPROGRAM)

            JPSR          ERROR           [YES, WARNING ERROR
                          ER56            [  (END STATEMENT MISSING)

IFZERO V2,  JPSR          FOVRLY          ENDC
            JUMP1         ENDS            [JUMP AS IF END STATEMENT PRESENT


[ PROCESS "END" KEYWORD ...

ENDP:       MDAR          SCHAR           [FETCH DELIMETER
            MDXO'F        15              [C/R ?
            JPLS          ENDP1           [NO, JUMP TO CHECK FOR "END FILE"

            MDAR'N        OPTFG           [LEGAL END STMNT, OUTPUT STARTED ?
            JPAN          ETXC1           [NO, JUMP FOR ERROR

            MDAR          KEYND           [YES, FETCH FLAGS FOR END STATEMENT
            JUMP          SCAN8           [AND JUMP TO PROCESS

ENDP1:      JPSR          CKEYP           [PARTIAL KEYWORD FOLLOWED BY "FILE" ?
            TEXT          /FILE/
                          0
            MDAR          KEYNF           [YES, FETCH FLAGS FOR "ENDFILE"

            JPSR          CKEYP           [PARTIAL KEYWORD FOLLOWED BY "DATA" ?
            TEXT          /DATA/
                          0
            MDAR          KYNDA           [YES, FETCH FLAGS FOR "ENDDATA"

            JPSR          CKEYP           [PARTIAL KEYWORD FOLLOWED BY "LIST" ?
            TEXT          /LIST/
                          0
            MDAR          KYNDL           [YES, FETCH FLAGS FOR "ENDLIST"

            JUMP          KEYER           [NO, KEYWORD NOT RECOGNIZED


[ CHECK FOR SPLIT KEYWORD
[   (TWO ARGUMENT WORDS CONTAIN TEXT STRING FOR 2ND PART OF SPLIT KEYWORD)
[   (3RD ARGUMENT CONTAINS INSTR TO FETCH KEYWORD FLAGS, IF FOUND)
[   RETURNS ...
[     IF DELIMETER NOT BLANK, RETURNS (NOT A SPLIT KEYWORD)
[     IF SPLIT KEYWORD VERIFIED, JUMPS BACK TO SCAN USING ARGUMENT FLAGS
[     ELSE, RETURNS WITH SYMBOL SAVED TO ALLOW ANOTHER CHECK

CKEYP:      JUMP          .               [ENTRY
            MDAR          SYMSV           [SYMBOL ALREADY SAVED ?
            JPAN          .+4             [YES, SKIP

            MDAR          SCHAR           [DELIMETER = BLANK ?
            MDXO'F        40
            JPLS          CKEY1           [NO, JUMP TO RETURN

            JPSR          GSYMA           [GET NEXT ALPHAMERIC SYMBOL
            MDAR'H        SYMB3           [MORE THAN TEN CHARS ?
            JPLS          GSER1           [YES, ERROR

            MDAR          SYMB1           [NO, FETCH 1ST SYMBOL WORD
            MDXO'I        CKEYP           [COMPARE WITH 1ST ARGUMENT
            ARAR'H'O'X    CKEYP           [MATCH ?
            LSAR'X        CKEYP           [NO, INDEX TO RETURN
            JPLS          CKEY2           [AND JUMP TO SAVE SYMBOL

            MDAR          SYMB2           [YES, FETCH 2ND SYMBOL WORD
            MDXO'I        CKEYP           [MATCHES 2ND ARGUMENT WORD ?
            ARAR'H'O'X    CKEYP
            JPLS          CKEY2           [NO, JUMP TO SAVE SYMBOL AND RETURN

            MDIR'I        CKEYP           [YES, FETCH KEYWORD FLAGS
            JUMP          SCAN8           [AND GO PROCESS

CKEY1:      MDAR          CKEYP           [1ST WORD DELIMETER NOT BLANK,
            MDAS'F        3               [INDEX RETURN
            ARIR'F                        [AND RETURN, NOT FOUND

CKEY2:      ARMD'O        SYMSV           [NO SYMBOL MATCH, SAVE SYMBOL
            MDIR'X        CKEYP           [AND RETURN


[ KEYWORD ERROR ...

KEYER:      JPSR          ERROR           [FATAL ERROR (ABORTS CARD)
                          ER17            [  (KEYWORD NOT RECOGNIZED)


[ SYNTAX ERROR ...

ILGCH:      MDAR          SCHAR           [FETCH CHARACTER
            MDXO'F        15              [C/R ?
            JSLS          ERROR           [YES, ILLEGAL END OF STATEMENT
                          ER12

            JPSR          ERROR           [NO, ILLEGAL CHAR ERROR
                          ER21


[ MISSING COMMA ...

COMER:      JUMP          .               [ENTRY
CHSAV:      ARMD'O        GCSSV           [SET TO RE-READ LAST CHARACTER
            JPSR          ERROR           [REPORT ERROR
                          ER22
            MDIR          COMER           [RETURN TO CALLER


[ SKIP BLANK DELIMETER ...

BLSKP:      JUMP          .               [ENTRY
            MDAR          SCHAR           [FETCH LAST STATEMENT CHAR
            MDXO'F        40              [IS IT A BLANK ?
            LSIR          CHSAV           [NO, SET TO RE-READ IT
            MDIR          BLSKP           [YES, RETURN


[ PROCESS ADEPT-MODE CARD ...

ADPCD:      JPSR          RCDRT           [RETURN FROM RCD AND SET CARD DSPCH
            JPSR          LSTER           [LIST ERRORS ON LAST LINE
            MDAR          DATAF           [DATA2D/3D MODE ?
            JSAN          ERROR           [YES, FATAL ERROR
                          ER221           [  (ADEPT MODE ILLEGAL IN DATA DEF'N)

            JPSR          EMITI           [PREPARE FOR CODE EMISSION
            ARMD'O        LABEL           [SET NO STATEMENT LABEL
            MDAR'N        OPTFG           [OUTPUT STARTED YET ?
            JSAN          SMAIN           [NO, ASSUME FORTMAIN

            JPSR          ALLOC           [ALLOCATE VARIABLES
            JPSR          DOHDR           [OUTPUT HEADER CODE, IF PENDING
IFZERO V2,  JPSR          FOVRLY          ENDC
            JUMP3         ADPCDX          [JUMP FOR ADEPT-MODE PROCESSING


[ GET NEXT SOURCE CHARACTER (MOST BASIC LEVEL)
[   RETURNS ...
[     (1)  END-OF-TEXT
[     (2)  CHAR IN AR AND GCHAR

GCH:        JUMP          .               [ENTRY
            MDAR'N        GCHSV           [LAST CHAR SAVED ?
            JPAN          .+4             [NO, SKIP

            ARMD          GCHSV           [YES, CLEAR SAVE FLAG
            MDAR          GCHAR           [FETCH LAST CHARACTER
            JUMP          .+2             [AND SKIP

.ICH:       JPSR          $ICH            [INPUT NEXT SOURCE CHAR
            MDXO'F        77              [77 CODE ?
            JPLS          .+4             [NO, SKIP

            ARAR'X        COLS            [YES, INDEX COLUMN COUNTER
            JPSR          ERROR           [TERMINAL ERROR
                          ER1             [  (ILLEGAL CHARACTER)

            MDXO'F        77              [RESTORE CHAR
            ARMD          GCHAR           [SAVE
            MDIR'X        GCH             [RETURN (2) WITH CHAR IN AR AND GCHAR

GCHAR:                    0               [INPUT SOURCE CHARACTER
GCHSV:                    0               [SAVED CHARACTER FLAG


[ GET NEXT SOURCE CHAR WITH TERMINAL ERROR ON END OF TEXT

GCHT:       JUMP          .               [ENTRY
            JPSR          GCH             [GET NEXT SOURCE CHARACTER
            JUMP          .+2             [SKIP IF END-OF-TEXT
            MDIR          GCHT            [ELSE, RETURN
            JPSR          ERROR           [TERMINAL ERROR
                          ER2             [  (END-OF-TEXT IN MIDDLE OF LINE)


[ PRIO END-OF-TEXT/ERROR HOOK

GCEOT:      ARAR'H'O'F                    [AR NON-ZERO ?
            JPLS          .+3             [YES, SKIP

            ARMD'O        ETXFG           [ELSE, END-OF-TEXT, SET FLAG
            MDIR          GCH             [AND RETURN (1) FROM GCH

            MDXO'F        5               [OPERATOR ABORT ?
            JSLS          ERROR           [NO, TERMINAL ERROR
                          ER3             [  (PRIO DISK ERROR)
            JPSR          ERROR           [YES, TERMINAL ERROR
                          ER4             [  (OPERATOR ABORT)


[ GET FIRST CHARACTER FROM FORTRAN CARD
[   RETURNS ...
[     (1)  END-OF-TEXT
[     (2)  C/R (ALSO IN GCHAR)
[     (3)  BLANK OR TAB (IN AR AND GCHAR)
[     (4)  OTHER (IN AR AND GCHAR)

GCCF:       JUMP          .               [ENTRY
            ARXO'F                        [CLEAR ...
            ARMD          COLS            [  COLUMN COUNTER
            ARMD          GCCSV           [  SAVED CARD CHARACTER FLAG
            ARMD          GCTAB           [  INITIAL TAB FIELD FLAG
            ARMD          TAB7F           [  TAB TO COL 7 ONLY FLAG
            ARMD          LITFG           [  LITERAL EXPANSION FLAG

            ARAR'X        LNCNT           [INDEX LINE COUNTER
            JPSR          GCH             [GET NEXT SOURCE CHAR
            MDIR          GCCF            [  RETURN (1) IF END-OF-TEXT

            MDBR'H        $PRIOP          [PLACE SOURCE PAGE!H LINE
            MDBR'O        $PRIOL          [  IN BR LIGHTS

            MDAR'N        DSPFG           [DISPLAYING ?
            JPAN          GCCF1           [NO, SKIP

            MDAR          FNSWS           [YES, FETCH OLD SWITCHES TO AR
            MDIC'O'H      C40             [SET TO READ FNS 1-15
            S5MD'H        FNSWS           [SAVE NEW SWITCHES
            MDXO'O        FNSWS           [GET POSITIVE TRANSITIONS
            MDAR'A'F      17777           [MASK FNS 3-15
            JPLS          GCCF2           [SKIP IF ANY SWITCHES HIT

GCCF1:      MDAR'X        GCCF            [INDEX RETURN LOCATION
            ARMD          GCC             [SAVE FOR RETURN FROM GCC
            MDAR          GCHAR           [FETCH CHAR
            JUMP          GCC3            [JUMP INTO GCC TO PROCESS

GCCF2:      JPSR          $DSPWT          [ON SWITCH HIT, DISPLAY SCREEN
            JPSR          DSWCK           [ON FNS HIT, CHECK FOR LISTS
            JUMP          GCCF1           [THEN JUMP TO CONTINUE


[ GET NEXT CHARACTER FROM FORTRAN CARD
[   RETURNS ...
[     (1)  C/R (ALSO IN GCHAR)
[     (2)  BLANK OR TAB (IN AR AND GCHAR)
[     (3)  OTHER (IN AR AND GCHAR)

GCC:        JUMP          .               [ENTRY
            MDAR'N        GCCSV           [LAST CHAR SAVED ?
            JPAN          GCC1            [NO, SKIP

            ARMD          GCCSV           [YES, CLEAR SAVED CHAR FLAG
            MDAR          GCHAR           [FETCH CHAR
            MDXO'F        15              [C/R ?
            JPLS          GCC6            [NO, JUMP TO CHECK FOR TAB OR SPACE

            MDIR          GCC             [YES, RETURN (1)

GCC1:       MDAR          GCTAB           [SPACING UP TO INITIAL TAB ?
            JPLS          GCC4            [YES, JUMP

GCC2:       JPSR          GCHT            [FETCH NEXT SOURCE CHAR (EOT ILLEGAL)

GCC3:       MDXO'F        15              [C/R ?
            JPLS          .+2             [NO, SKIP

            MDIR          GCC             [YES, RETURN (1)

            MDXO'F        15'11           [TAB ?
            JPLS          GCC5            [NO, JUMP

            MDAR'N        COLS            [YES, PAST COLUMN 6 ?
            MDAS'F        6
            MDAR'O        ADPTF           [OR IN ADEPT MODE ?
            JPAN          GCC5            [YES, SKIP (TAB IS SIGNIFICANT)

            MDAR'F        5               [SET TAB FIELD END TO COL 5
            ARMD          GCTAB
            JPSR          GCHT            [GET NEXT CHAR
            ARMD          GCTBS           [SAVE IT

            MDXO'N        C20             [NEXT CHAR NOT NUMERIC ?
            MDAS'F        10.
            MDAR'O        TAB7F           [OR MUST ALWAYS TAB TO COL 7 ?
            ANAR'X        GCTAB           [YES, INDEX END TAB COLUMN

            MDAR          C40             [SET CHAR TO RETURN TO BLANK
            ARMD          GCHAR
            MDAR          GCTAB           [FETCH TAB COLUMN

GCC4:       MDXO          COLS            [CURR COL = LAST IN TAB FIELD ?
            JPLS          GCC5            [NO, GO RETURN BLANK

            ARMD          GCTAB           [YES, RESET TAB FLAG
            MDAR          GCTBS           [FETCH SAVED CHAR
            ARMD          GCHAR           [SET AS CURRENT
            JUMP          GCC3            [JUMP TO PROCESS

GCC5:       MDAR          LSTFG           [LISTING SOURCE STATEMENTS ?
            JSAN          LCHSV           [YES, SAVE CHAR FOR LISTING

            MDAR'X'N      COLS            [BUMP COLUMN NO.
            MDAS'F        73.             [PAST COLUMN 72 ?
            JPAN          GCC2            [YES, JUMP FOR NEXT (SKIP TO C/R)

GCC6:       MDAR          GCHAR           [FETCH CHAR
            MDXO'F        11              [TAB ?
            LSXO          C40X11          [OR BLANK ?
            LSAR'X        GCC             [NO, SET FOR RETURN (3)

            MDAR          GCHAR           [RETURN WITH CHAR IN AR
            MDIR'X        GCC             [RET (2) IF TAB OR BLNK, ELSE RET (3)

COLS:                     0               [COLUMN COUNTER
GCCSV:                    0               [SAVE CHARACTER FLAG
GCTAB:                    0               [TAB FIELD FLAG AND COLUMN NO.
GCTBS:                    0               [SAVED CHAR AFTER TAB
TAB7F:                    0               [FORCE TAB TO COL 7 FLAG


[ GET EXPANDED CARD CHARACTER (WITH LITERAL EXPANSION)
[   RETURNS (CHAR CODE IN AR) ...
[     (1)  C/R
[     (2)  BLANK OR TAB
[     (3)  OTHER

GCE:        JUMP          .               [ENTRY
            MDAR'N        LITFG           [LITERAL MODE ?
            JPAN          GCE2            [NO, JUMP FOR CARD CHAR

            MDAR          LITCT           [SHIFT COUNT = 0 ?
            JPLS          .+3             [NO, SKIP

            ARAR'X        LITFP           [YES, INDEX FETCH PTR
            MDAS'F        30.             [SET SHIFT FOR 1ST CHAR OF NEXT WORD

            MDAS'F'N      6               [DECREMENT SHIFT CNT FOR NEXT CHAR
            ARMD          LITCT           [SAVE NEW RIGHT SHIFT INSTR
            MDAR'I        LITFP           [FETCH CURR LITERAL STRING WORD

LITCT:      ARRS                          [SHIFT TO GET CURR CHAR
            NOOP                          [  (WAIT FOR SHIFT COMPLETE ON DPR2)
            MDAR'A        C77             [MASK CHARACTER
            ARMD          SCHAR           [SAVE EXPANDED CHAR
            MDXO'F        15              [END OF STRING ?
            JPLS          GCE1            [NO, SKIP

            MDAR'N        LITFG           [YES, FETCH SAVED STRING DELIMETER
            ARMD          SCHAR           [SET AS CURR CHAR

            MDAR'I'N      LITPP           [FETCH FLAG ON TOP OF LITERAL
            ARMD'N        LITFG           [  PUSH-DOWN STACK
            JPAN          GCE1            [JUMP IF NOW OUT OF LITERAL MODE

            MDAR          LITPP           [FETCH PUSH-DOWN POINTER
            MDAS'F'N      3               [POP DOWN TO LAST ENTRY
            ARMD          LITPP           [SAVE NEW PUSH-DOWN POINTER
            ARMD          LITCT           [ALSO FOR INDEXING
            MDAR'I'X      LITCT           [POP ...
            ARMD          LITFP           [  FETCH POINTER
            MDAR'I'X      LITCT
            ARMD          LITCT           [  CHARACTER SHIFT COUNT

GCE1:       MDAR          SCHAR           [FETCH EXPANDED CHAR
            MDXO'F        40              [CHAR = BLANK ?
            LSXO          C40X11          [OR TAB ?
            LSAR'X        GCE             [NO, INDEX RETURN

            MDAR          SCHAR           [FETCH CHAR
            MDIR'X        GCE             [RETURN (2) IF BLANK, ELSE RET (3)

GCE2:       MDAR          GCE             [NOT IN LITERAL MODE, SAVE RETURN
            ARMD          GCC             [  FOR GCC
            JUMP          GCC+1           [AND JUMP INTO GCC TO GET CARD CHAR

LITFG:                    0               [LITERAL FLAG AND SAVED EOS CHAR
LITFP:                    0               [LITERAL STRING FETCH POINTER
LITPP:                    0               [LITERAL PUSH-DOWN TABLE POINTER

LITPS:                    0               [LITERAL PUSH-DOWN STACK ...
            LOC           3*LLEVS + .     [  (THREE WORDS/LEVEL)
LITPE = .-1


[ GET NEXT STATEMENT CHARACTER

GCS:        JUMP          .               [ENTRY
            MDAR'N        GCSSV           [SAVED CHAR FROM LAST CALL ?
            JPAN          GCS1            [NO, JUMP

            ARMD          GCSSV           [YES, CLEAR SAVED CHAR FLAG
            MDAR          SCHAR           [FETCH PREVIOUS CHARACTER
            MDIR          GCS             [RETURN

GCS1:       MDAR          GCSHF           [FILLING OUT BLANKS AT END OF CARD ?
            JPAN          GCS14           [YES, JUMP

GCS2:       JPSR          GCE             [GET NEXT EXPANDED CHARACTER
            JUMP          GCS11           [JUMP IF END OF CARD
            JUMP          GCS5            [JUMP IF BLANK OR TAB

GCS3:       ARMD          SCHAR           [SAVE CHARACTER
            MDXO'F        ];              [SEMI-COLON ?
            MDAR'O        HOLFG           [AND NOT IN HOLLERITH STRING ?
            JPLS          GCS6            [NO, SKIP

GCS4:       MDAR          C15             [YES, SET CHAR = C/R
            JUMP          GCS10           [JUMP TO RETURN

GCS5:       ARMD          SCHAR           [SAVE BLANK OR TAB
            MDAR'N        HOLFG           [HOLLERITH BLANK ?
            JPAN          .+4             [NO, SKIP (YES, SIGNIFICANT)

GCS6:       MDAR          SCHAR           [FETCH CHARACTER
GCSPK:      NOOP                          [EXECUTE PACKING INSTR IF IN FORMAT
            MDIR          GCS             [RETURN

            MDAR'N        SCANF           [IN SCAN MODE ?
            JPAN          GCS2            [NO, IGNORE BLANK, LOOP FOR NEXT

GCS7:       JPSR          GCE             [YES, GET NEXT CHARACTER
            JUMP          GCS12           [  JUMP IF END OF CARD
            JUMP          .-2             [  SKIP BLANKS OR TABS

            JPSR          CHTYP           [CHECK TYPE OF NEXT NON-BLANK CHAR
            JUMP          GCS3            [  IF SPECIAL, RETURN IT
            NOOP                          [  IF ALPHANUMERIC ...

            MDAR'N        LITFG           [LITERAL MODE ?
            JPAN          GCS8            [NO, JUMP

            MDAR          LITCT           [YES, BUMP LITERAL SHIFT COUNT
            MDAS'F        6               [  TO RE-READ CHARACTER
            ARMD          LITCT
            JUMP          .+2             [SKIP

GCS8:       ARMD'O        GCCSV           [SET TO RE-READ CARD CHARACTER

GCS9:       MDAR          C40             [FETCH BLANK CHARACTER

GCS10:      ARMD          SCHAR           [SAVE CHARACTER
            JUMP          GCSPK           [JUMP TO RETURN

GCS11:      MDAR'N        SCANF           [END OF CARD, SCAN MODE ?
            JPAN          GCS13           [NO, SKIP

GCS12:      JPSR          RCD             [C/R WHILE SKIPPING SCAN BLANKS,
            JUMP          GCS4            [  READ NEXT, IF NEW CARD, RETURN C/R
            JUMP          GCS7            [  LOOP IF CONTINUATION CARD

GCS13:      MDAR'N        HOLFG           [C/R IN HOLLERITH STRING ?
            JPAN          GCS15           [NO, JUMP

            ARMD'O        GCSHF           [SET HOLLERITH END FIELD FLAG

GCS14:      MDAR'X        COLS            [FETCH AND INDEX COLUMN NO.
            MDAS'F'N      72.             [PAST COLUMN 72 ?
            MDAR'A        HOLFG           [OR HOLLERITH MODE RESET ?
            JPAN          GCS9            [NO, JUMP TO RETURN BLANK

            ARMD          GCSHF           [YES, RESET BLANK EXPANSION FLAG

GCS15:      MDAR          FCDFG           [COMPILER CONTROL CARD ?
            JPAN          GCS4            [YES, RETURN C/R

            JPSR          RCD             [READ NEXT CARD
            JUMP          GCS4            [NEW STATEMENT, GO RETURN C/R
            JUMP          GCS2            [CONTINUATION, PROCESS NEXT CHAR

SCHAR:                    0               [STATEMENT CHARACTER
GCSSV:                    0               [STATEMENT CHARACTER SAVED FLAG
GCSHF:                    0               [END OF CARD HOLLERITH FIELD FLAG
HOLFG:                    0               [HOLLERITH EXPANSION FLAG


[ GET NEXT STATEMENT CHARACTER AND TEST FOR END OF STATEMENT
[   RETURNS ...
[     (1)  END OF STATEMENT (C/R)
[     (2)  OTHER CHARACTER (IN AR)

GCST:       JUMP          .               [ENTRY
JSGCS:      JPSR          GCS             [GET STATEMENT CHARACTER
            MDXO'F        15              [C/R ?
            JPLS          .+2             [NO, SKIP
            MDIR          GCST            [YES, RETURN (1)

            MDXO'F        15              [RESTORE CHARACTER
            MDIR'X        GCST            [RETURN (2)


[ GET SYMBOL (BASIC)
[   RETURNS ...
[     (1)  SPECIAL CHARACTER
[     (2)  NUMERIC CHARACTER
[     (3)  ONE-WORD SYMBOL (IN SYMB1, SYMB2 = SYMB3 = 0)
[     (4)  TWO-WORD SYMBOL (IN SYMB1 AND SYMB2, SYMB3 = 0)
[     (5)  THREE-WORD SYMBOL (IN SYMB1, SYMB2, SYMB3)

GS:         JUMP          .               [ENTRY
            ARXO'F                        [CLEAR ...
GS1:        ARMD          SYMB1           [  WORD 1 BUFFER
            ARMD          SYMB2           [  WORD 2 BUFFER
            ARMD          SYMB3           [  WORD 3 BUFFER
            JPSR          GCS             [GET NEXT STATEMENT CHARACTER
            JPSR          CHTYP           [CHECK CHARACTER TYPE ...
            MDIR          GS              [  IF SPECIAL, RETURN (1)
            MDIR'X        GS              [  IF DIGIT, RETURN (2)

            MDAR          GS1             [INITIALIZE STORE INSTR FOR 1ST
            ARMD          GS4             [  SYMBOL SAVE BUFFER

GS2:        MDAR'F        5               [SETUP COUNT FOR FIVE CHARACTERS
            ARMD'N        GS99
            ARAR'X        GS              [INDEX TO NEXT RETURN

GS3:        MDAR          SCHAR           [FETCH LAST CHARACTER
            MDAR'O'K'I    .+1             [COMBINE WITH CURRENT SYMBOL

GS4:        ARMD                          [SAVE SYMBOL

            JPSR          GCS             [GET NEXT STATEMENT CHARACTER
            JPSR          CHTYP           [CHECK CHARACTER TYPE ...
            JUMP          GS5             [  IF SPECIAL, GO FINISH UP
            NOOP                          [  IF DIGIT OR LETTER, ...

            MDAR'X'N      GS99            [PACKED FIVE CHARS ?
            JPLS          GS3             [NO, LOOP

            MDAR'X        GS4             [YES, INDEX SYMBOL WORD POINTER
            MDXO'F        SYMB3+1         [DONE THREE WORDS ?
            JPLS          GS2             [NO, REPEAT FOR NEXT WORD

GSER1:      JPSR          ERROR           [YES, ERROR
                          ER10            [  (SYMBOL TOO LONG)

            MDAR'I'K      GS4             [ROTATE CURRENT SYMBOL WORD ONE CHAR
            ARMD'I        GS4             [STORE SYMBOL WORD

GS5:        MDAR'X'N      GS99            [END OF SYMBOL, WORD FILLED ?
            JPLS          .-3             [NO, LOOP TO LEFT-JUSTIFY SYMBOL

            MDIR'X        GS              [YES, TAKE CURRENT RETURN

GS99:                     0               [TEMP STORAGE

SYMB1:                    0               [SYMBOL WORD 1
SYMB2:                    0               [SYMBOL WORD 2
SYMB3:                    0               [SYMBOL WORD 3


[ GET SYMBOL AND LOOKUP IN LITERAL TABLE
[   (SYMBOL ALREADY PRESENT IF IN ADEPT MODE)
[
[   RETURNS ...
[     (1)  SPECIAL CHARACTER
[     (2)  NUMERIC CHARACTER
[     (3)  NON-LITERAL SYMBOL (IN SYMB1, SYMB2, AND SYMB3)
[     (4)  LITERAL SYMBOL (IN SYMB1, SYMB2, AND SYMB3)

GSL:        JUMP          .               [ENTRY
            MDAR          ADPTF           [ADEPT MODE ?
            JPAN          GSL5            [YES, JUMP

            JPSR          GS              [GET BASIC SYMBOL ...
            MDIR          GSL             [  SPECIAL, RETURN (1)
            MDIR'X        GSL             [  DIGIT, RETURN (2)
            JUMP          GSL1            [  IF ONE WORD, JUMP TO LOOKUP
            JUMP          GSL2            [  TWO-WORD, JUMP TO LOOKUP

GSL0:       MDAR'F        LITB3           [LOOKUP 3-WORD SYMBOL
            JPSR          SURC3           [  IN LITERAL TABLE
            MDAR          SYMB1
            MDAR          SYMB2
            MDAR          SYMB3
            JUMP          GSL4            [NOT FOUND, JUMP TO RETURN
            JUMP          GSL3            [FOUND, JUMP TO ENSTATE LITERAL

GSL2:       MDAR'F        LITB2           [LOOKUP 2-WORD SYMBOL IN
            JPSR          SURC2           [  LITERAL TABLE
            MDAR          SYMB1
            MDAR          SYMB2
            JUMP          GSL4            [NOT FOUND, JUMP TO RETURN
            JUMP          GSL3            [FOUND, JUMP TO ENSTATE LITERAL

GSL1:       MDAR'F        LITB1           [LOOKUP 1-WORD SYMBOL IN
            JPSR          SURC1           [  LITERAL TABLE
            MDAR          SYMB1
            JUMP          GSL4            [NOT FOUND, JUMP TO RETURN

GSL3:       MDAR'I'N      SURP            [FOUND, SUPERSEDED LITERAL ?
            ANAR'X        GSL             [NO, OK, INDEX RETURN

GSL4:       ARAR'X        GSL             [INDEX TO PROPER RETURN
            MDIR'X        GSL             [AND RETURN

GSL5:       MDAR'H        SYMB3           [THREE WORD SYMBOL ?
            JPLS          GSL0            [YES, GO PROCESS

            MDAR'H        SYMB2           [NO, TWO-WORD SYMBOL ?
            JPLS          GSL2            [YES, GO PROCESS

            JUMP          GSL1            [NO, GO PROCESS ONE-WORD SYMBOL


[ GET SYMBOL EXPANDED (WITH LITERAL TABLE LOOKUP AND EXPANSION)
[   RETURNS ...
[     (1)  SPECIAL CHARACTER (ALSO, IF ADEPT MODE AND LITERAL STARTED)
[     (2)  NUMERIC CHARACTER
[     (3)  VALID SYMBOL (IN SYMB1, SYMB2, AND SYMB3)

GSE:        JUMP          .               [ENTRY
            JPSR          GSL             [GET BASIC SYM AND CHK IF LITERAL ...
            MDIR          GSE             [  IF SPECIAL, RETURN (1)
            MDIR'X        GSE             [  IF NUMERIC, RETURN (2)
            JUMP          GSE3            [  NOT A LITERAL, JUMP TO RETURN

            MDAR'N        LITFG           [ALREADY IN LITERAL EXPANSION ?
            JPAN          GSE1            [NO, SKIP

            MDAR          LITPP           [YES, FETCH PUSH DOWN POINTER
            MDXO'F        LITPE           [PUSH-DOWN TABLE FULL ?
            JPLS          .+3             [NO, SKIP

            JPSR          ERROR           [YES, ERROR
                          ER45            [  (TOO MANY NESTED LITERALS)

            MDAR          LITFP           [PUSH ...
            ARMD'I'X      LITPP           [  LITERAL STRING FETCH POINTER
            MDAR          LITCT
            ARMD'I'X      LITPP           [  CHAR SHIFT COUNT
            MDAR          LITFG
            ARMD'I'X      LITPP           [  SAVED END CHARACTER
            JUMP          GSE2            [JUMP TO SET NEW LITERAL

GSE1:       MDAR'F        LITPS           [FIRST NEW LITERAL,
            ARMD          LITPP           [  INITIALIZE PUSH-DOWN POINTER

GSE2:       MDAR'L                        [LITERAL FOUND,
            ARRS          0               [  SET CHARACTER SHIFT TO END
            ARMD          LITCT           [  OF WORD
            MDAR          SURP1           [FETCH ADDR-1 OF LITERAL STRING
            ARMD          LITFP           [SAVE LITERAL FETCH POINTER
            MDAR          SCHAR           [FETCH DELIMETER
            ARMD'N        LITFG           [SAVE AND SET LITERAL MODE FLAG
            MDAR          ADPTF           [ADEPT MODE ?
            ANIR          GSE             [YES, RETURN (1)

            JUMP          GSE+1           [NO, JUMP TO GET EXPANDED SYMBOL

GSE3:       ARAR'X        GSE             [SYMBOL NOT A LITERAL,
            MDIR'X        GSE             [  RETURN (3)

LITB1:                    0               [ONE-WORD LITERALS TABLE
LITB2:                    0               [TWO-WORD LITERALS TABLE
LITB3:                    0               [THREE-WORD LITERALS TABLE


[ GET FORTRAN SYMBOL
[   RETURNS ...
[     (1)  SPECIAL CHARACTER
[     (2)  NUMERIC CHARACTER (MAY HAVE SYMBF = 4 OR 8, SEE BELOW)
[     (3)  VALID SYMBOL (IN SYMB1, SYMB2, AND SYMB3)
[   ON RETURN 3 SYMBF WILL BE SET NON-ZERO IF THERE IS A
[     PREFIX ON THE SYMBOL, AS FOLLOWS ...
[       SYMBF = 1, 2, OR 3 FOR $, $$, OR $$$
[       SYMBF = 4 FOR @ (PLUS 1, 2, OR 3)
[       SYMBF = 8 FOR # (PLUS 1, 2, OR 3)

GSYM:       JUMP          .               [ENTRY
            MDAR'N        SYMSV           [SAVED SYMBOL FROM LAST CALL ?
            JPAN          GSYM0           [NO, SKIP

            ARMD          SYMSV           [YES, CLEAR SAVE FLAG
            MDAR'H        SYMB1           [ANY SYMBOL ?
            JPLS          GSYM1           [YES, JUMP TO RETURN

            MDAR          SCHAR           [NO, FETCH LAST CHAR
            JPSR          CHTYP           [CHECK ITS TYPE
            MDIR          GSYM            [  IF SPECIAL, RETURN (1)
            MDIR'X        GSYM            [  IF DIGIT, RETURN (2)
            JUMP          .               [  (SHOULD NOT GET HERE)

GSYM0:      ARMD'N        SYMBF           [CLEAR PREFIX FLAGS
            JPSR          GSE             [GET EXPANDED SYMBOL ...
            JUMP          GSYM2           [  IF SPECIAL, CHECK IF PREFIX
            MDIR'X        GSYM            [  IF DIGIT, RETURN (2)

GSYM1:      ARAR'X        GSYM            [IF ALPHANUMERIC SYMBOL, INDEX RETURN
            MDIR'X        GSYM            [  AND RETURN (3)

GSYM2:      MDXO'F        ]@              [AT-SIGN PREFIX ?
            JPLS          GSYM3           [NO, JUMP

            MDAR          C4              [YES, SET PREFIX FLAG
            ARMD          SYMBF
            ARMD          SCANF           [AND RESET SCAN MODE
            JPSR          GSE             [GET NEXT SYMBOL
            JUMP          GSYM4           [  IF SPECIAL, CAN ONLY BE $, JUMP
            MDIR'X        GSYM            [  IF NUMERIC, LABEL CONST, RET (2)
            JUMP          GSYM1           [  ALPHABETIC, GO RETURN (3)

GSYM3:      MDXO'F        ]@']"#"         [POINTER PREFIX ?
            JPLS          GSYM4           [NO, GO CHECK IF EXT REF PREFIX

            MDAR'B        C4              [YES, SET PREFIX FLAG
            ARMD          SYMBF
            ARMD          SCANF           [AND RESET SCAN MODE
            JPSR          GSE             [GET NEXT SYMBOL
            JUMP          .+3             [  IF SPECIAL, CAN ONLY BE $, SKIP
            MDIR'X        GSYM            [  NUMERIC, EQUIV ADDR PTR, RET (2)
            JUMP          GSYM1           [  IF ALPHABETIC, GO RETURN (3)

GSYM4:      MDAR          SCHAR           [FETCH LAST CHARACTER (SPECIAL)
            MDXO'F        ]$              [IS IT A DOLLAR SIGN ?
            JPLS          GSYM5           [NO, JUMP

            MDAR'X        SYMBF           [YES, INDEX PREFIX FLAG
            ARMD          SCANF           [AND RESET SCAN MODE
            MDAR'A'F      3               [MORE THAN 3 DOLLAR-SIGNS ?
            JPLS          .+3             [NO, SKIP

GSER2:      JPSR          ERROR           [ERROR
                          ER11            [  (ILLEGAL $,#,@ USAGE)

            JPSR          GSE             [GET NEXT SYMBOL
            JUMP          GSYM4+1         [  SPECIAL, CK IF ANOTHER DOLLAR-SIGN
            JUMP          GSER2           [  NUMERIC, ILLEGAL
            JUMP          GSYM1           [  LETTER, GO RETURN (3)

GSYM5:      MDAR          SYMBF           [NOT DOLLAR-SIGN, ANY OTHER PREFIX ?
            JPLS          GSER2           [YES, ILLEGAL USAGE
            MDIR          GSYM            [NO, RETURN (1), SPECIAL

SYMSV:                    0               [SYMBOL SAVED FLAG
SYMBF:                    0               [SYMBOL PREFIX FLAG


[ GET FORTRAN SYMBOL WITH SYNTAX ERROR IF NOT ALPHABETIC

GSYMA:      JUMP          .               [ENTRY
            JPSR          GSYM            [GET NEXT SYMBOL ...
            JUMP          ILGCH           [  SPECIAL, SYNTAX ERROR
            JUMP          ILGCH           [  DIGIT, SYNTAX ERROR
            MDIR          GSYMA           [  ALPHA, OK, RETURN


[ SEARCH FOR ONE WORD SYMBOL (ADDR OF 1ST PTR IN AR, ARG INSTR TO FETCH SYMBOL)
[   RETURNS ...
[     (1)  NOT FOUND
[     (2)  FOUND
[   ON RETURN, SURP CONTAINS ADDRESS OF ENTRY IF FOUND, OR OF NEXT ENTRY,
[       (POSSIBLY ZERO), IF NOT FOUND;
[     SURP2 CONTAINS ADDRESS OF PREVIOUS ENTRY (WHICH POINTS TO SURP);
[     SURP1 CONTAINS ADDRESS OF SYMBOL IF FOUND, OR ZERO IF NOT FOUND.

SURC1:      JUMP          .               [ENTRY
            ARMD          SURP2           [STORE ADDRESS OF INITIAL SEARCH PTR
            MDIR'I        SURC1           [FETCH ARGUMENT VALUE
            ARMD          TM1             [SAVE
            JUMP          SURC5           [JUMP TO STARTUP

SURC4:      MDAR          TM1             [FETCH ARGUMENT VALUE
            JPSR          MATCH           [COMPARE WITH TABLE ENTRY
            ARAR'X        SURC1           [FOUND, RETURN (2)
            MDIR'X        SURC1           [LESS THAN TABLE ENTRY, RETURN (1)

            MDAR          SURP            [.GT. TABLE, FETCH CURR SEARCH PTR
            ARMD          SURP2           [SAVE AS ADDR OF NEXT LINK PTR

SURC5:      MDAR'I        SURP2           [FETCH NEXT TABLE LINK
            MDAR'A        AMASK           [MASK
            ARMD          SURP            [SAVE AS CURRENT TABLE ENTRY
            ARMD          SURP1           [AND FOR INDEXING
            JPLS          SURC4           [END OF TABLE ?, NO LOOP

            MDIR'X        SURC1           [YES, RETURN (1), NOT FOUND


SURP:                     0               [POINTER TO CURRENT TABLE ENTRY
SURP1:                    0               [POINTER TO CURR MATCH VALUE IN ENTRY
SURP2:                    0               [ADDRESS OF LINK PTR TO CURR ENTRY


[ SEARCH FOR 2-WORD SYMBOL (ADDR OF 1ST PTR IN AR, 2 ARG INSTR'S TO FETCH SYMS)
[   RETURNS ...  SAME AS SURC1, ABOVE

SURC2:      JUMP          .               [ENTRY
            ARMD          SURP            [SAVE INITIAL SEARCH POINTER
            MDIR'I        SURC2           [FETCH 1ST WORD
            ARMD          TM1             [SAVE
            MDIR'I'X      SURC2           [FETCH 2ND SYMBOL WORD
            ARMD          TM2             [SAVE

SURC7:      MDAR          SURP            [SEARCH FOR 1ST WORD IN TABLE
            JPSR          SURC1
            MDAR          TM1

            MDIR'X        SURC2           [NOT FOUND, RETURN (1)

            MDAR          TM2             [FOUND, FETCH 2ND SYMBOL WORD
            JPSR          MATCH           [COMPARE WITH 2ND TABLE WORD
            ARAR'X        SURC2           [  MATCH, RETURN (2), FOUND
            MDIR'X        SURC2           [  LESS THAN TABLE WORD, RETURN (1)
            JUMP          SURC7           [  .GT. TABLE WORD, KEEP SEARCHING


[ SEARCH FOR 3-WORD SYMBOL (ADDR OF 1ST PTR IN AR, 3 ARG INSTR'S TO FETCH SYMS)
[   RETURNS ...  SAME AS SURC1, ABOVE

SURC3:      JUMP          .               [ENTRY
            ARMD          SURP            [SAVE INITIAL SEARCH POINTER
            MDIR'I        SURC3           [FETCH 1ST WORD
            ARMD          TM1             [SAVE
            MDIR'I'X      SURC3           [FETCH 2ND SYMBOL WORD
            ARMD          TM2             [SAVE
            MDIR'I'X      SURC3           [FETCH 3RD SYMBOL WORD
            ARMD          TM3             [SAVE

SURC8:      MDAR          SURP            [SEARCH FOR 1ST AND 2ND WORDS
            JPSR          SURC2
            MDAR          TM1
            MDAR          TM2

            MDIR'X        SURC3           [NOT FOUND, RETURN (1)

            MDAR          TM3             [FOUND, FETCH 3RD SYMBOL WORD
            JPSR          MATCH           [COMPARE WITH 3RD TABLE WORD
            ARAR'X        SURC3           [  MATCH, RETURN (2), FOUND
            MDIR'X        SURC3           [  LESS THAN TABLE WORD, RETURN (1)
            JUMP          SURC8           [  .GT. TBALE WORD, KEEP SEARCHING


[ COMPARE SYMBOL WORD TO TABLE (TEST VALUE IN AR, SURP1 POINTS TO TABLE VALUE)
[   RETURNS ...
[     (1)  TEST VALUE .EQ. TABLE WORD
[     (2)  TEST VALUE .LT. TABLE WORD (SURP1 = 0)
[     (3)  TEST VALUE .GT. TABLE WORD

MATCH:      JUMP          .               [ENTRY
            MDXO'I'X      SURP1           [SAME SIGN AS TABLE WORD ?
            JPAN          MATC2           [NO, NO MATCH, SKIP

            MDXO'I        SURP1           [YES, RESTORE TEST SYMBOL
            MDAE'I'N      SURP1           [.GT. TABLE SYMBOL ?
            JPAN          .+3             [NO, SKIP

MATC1:      ARAR'X        MATCH           [YES, INDEX RETURN
            MDIR'X        MATCH           [AND RETURN (3)

            MDAS'F        1               [EXACT MATCH ?
            JPAN          MATC3           [NO, JUMP FOR .LT. RETURN

            MDIR          MATCH           [YES, RETURN (1)

MATC2:      MDXO'I        SURP1           [DIFF SIGNS, TEST WORD NEGATIVE ?
            JPAN          MATC1           [YES, JUMP TO TAKE .GT. RETURN

MATC3:      ARXO'F                        [TEST WORD .LT. SYMBOL WORD
            ARMD          SURP1           [CLEAR FOUND FLAG
            MDIR'X        MATCH           [AND RETURN (2)


[ BINARY SEARCH FOR ONE-WORD SYMBOL
[   (MDAR'F TABLE IN AR, MDAR'F END+1 IN ARG)
[   RETURNS ...
[     (1)  NOT FOUND
[     (2)  FOUND (BSURP POINTS TO 2ND ENTRY WORD)

BSUR1:      JUMP          .               [ENTRY
            ARMD          BSURB           [SAVE BEGIN POINTER
            MDAR'I        BSUR1           [FETCH ARG

BSUR3:      ARMD          BSURE           [SAVE NEW END POINTER
            MDAE'N        BSURB           [COMPUTE NO. WORDS TO SEARCH

BSUR4:      ANIR'X        BSUR1           [BEGIN=END, RETURN (1), NOT FOUND

            ARRS          2               [DIVIDE NO. ENTRIES BY TWO
            ARAR'B'F                      [DOUBLE FOR TWO-WORD ENTRIES
            MDAE          BSURB           [ADD BEGIN ADDRESS
            ARMD          BSURP           [SAVE NEW SEARCH ADDRESS

            MDAR'I        BSURP           [FETCH SYMBOL FROM TABLE
            MDAE'N        SYMB1           [.LE. CURR SYMBOL ?
            JPAN          .+3             [YES, JUMP TO CHECK FOR MATCH

            MDAR          BSURP           [NO, FETCH SEARCH POINTER
            JUMP          BSUR3           [JUMP TO SET AS NEW END

            ARAR'N'X      BSURP           [INDEX SEARCH POINTER TO VALUE WORD
            ARAR'H'O'F                    [EXACT MATCH ?
            JPLS          .+3             [NO, SKIP

            ARAR'X        BSUR1           [YES, INDEX RETURN
            MDIR'X        BSUR1           [RETURN (2), FOUND

            MDAR'X'N      BSURP           [INDEX SEARCH PTR TO NEXT ENTRY
            ARMD'N        BSURB           [SAVE AS NEW BEGIN
            MDAE          BSURE           [COMPUTE NEW NO. WORDS TO SEARCH
            JUMP          BSUR4           [JUMP TO TEST FOR NONE LEFT

BSURP:                    0               [SEARCH POINTER
BSURB:                    0               [BEGIN SEARCH POINTER


[ BINARY SEARCH FOR TWO-WORD SYMBOL
[   (MDAR'F TABLE IN AR, MDAR'F END+1 IN ARG)
[   RETURNS ...
[     (1)  NOT FOUND
[     (2)  FOUND (BSURP POINTS TO VALUE WORD IN TABLE EXTENSION)

BSUR2:      JUMP          .               [ENTRY
            ARMD          TM1             [SAVE TABLE START
            ARMD          BSURB           [ALSO AS SEARCH BEGIN POINTER
            MDAR'I        BSUR2           [FETCH ARG
            ARMD          TM2             [SAVE TABLE END

BSUR5:      ARMD          BSURE           [SAVE SEARCH END POINTER
            MDAR          BSURB           [FETCH SEARCH BEGIN ADDR

BSUR6:      JPSR          BSUR1           [SEARCH FOR FIRST SYMBOL WORD
BSURE:      MDAR'F                        [  (ARG INSTR TO FETCH END ADDR)

            MDIR'X        BSUR2           [NOT FOUND, RETURN (1)

            MDAR'I        BSURP           [FETCH 2ND TABLE WORD
            MDAE'N        SYMB2           [.LE. 2ND SYMBOL WORD ?
            JPAN          .+4             [YES, JUMP FOR MATCH CHECK

            MDAR          BSURP           [NO, FETCH SEARCH POINTER
            MDAS'F'N      1               [DECREMENT TO FIRST ENTRY WORD
            JUMP          BSUR5           [JUMP TO SET AS NEW END AND RE-SEARCH

            MDAS'F        1               [EXACT MATCH ?
            JPAN          BSUR7           [NO, SKIP

            MDAR          BSURP           [YES, FETCH SEARCH POINTER
            MDAS'F'N      1               [DECREMENT TO FIRST ENTRY WORD
            MDAE'N        TM1             [SUBTRACT TABLE START
            ARRS          1               [COMPUTE ENTRY NO.
            MDAE          TM2             [GET ADDR IN TABLE EXTENSION
            ARMD          BSURP           [SAVE POINTER TO VALUE WORD
            ARAR'X        BSUR2           [INDEX RETURN
            MDIR'X        BSUR2           [RETURN (2), FOUND

BSUR7:      MDAR'X        BSURP           [BUMP SEARCH PTR TO NEXT ENTRY
            JUMP          BSUR6           [SEARCH AGAIN


[ SEARCH FOR KEYWORD
[   RETURNS ...
[     (1)  NOT FOUND
[     (2)  FOUND

SURKEY:     JUMP          .               [ENTRY
            MDAR          SYMBF           [ANY PREFIX ON SYMBOL ?
            LSIR          SURKEY          [YES, RETURN (CAN'T BE A KEYWORD)

            MDAR'H        SYMB3           [THREE-WORD SYMBOL ?
            JPLS          SURK3           [YES, JUMP TO SEARCH 3-WORD TABLE

            MDAR'H        SYMB2           [TWO-WORD SYMBOL ?
            JPLS          SURK2           [YES, JUMP TO SEARCH 2-WORD TABLE

            MDAR'F        KEY1T           [ELSE, SEARCH IN ONE-WORD KEYWORD
            JPSR          BSUR1           [  TABLE
            MDAR'F        KEY1E
            MDIR          SURKEY          [NOT FOUND, RETURN (1)
            MDIR'X        SURKEY          [FOUND, RETURN (2)

SURK2:      MDAR'F        KEY2T           [SEARCH IN TWO-WORD KEYWORD TABLE
            JPSR          BSUR2
            MDAR'F        KEY2E
            MDIR          SURKEY          [NOT FOUND, RETURN (1)
            MDIR'X        SURKEY          [FOUND, RETURN (2)

SURK3:      MDAR'F        KEY3T           [SEARCH IN THREE-WORD KEYWORD TABLE
            JPSR          SURC3
            MDAR          SYMB1
            MDAR          SYMB2
            MDAR          SYMB3
            MDIR          SURKEY          [NOT FOUND, RETURN (1)

            MDAR'X        SURP1           [FOUND, INDEX SEARCH POINTER
            ARMD          BSURP           [  TO FLAGS WORD
            MDIR'X        SURKEY          [AND RETURN (2)


[ SEARCH FOR INTRINSIC SUBROUTINE
[   RETURNS ...
[     (1)  NOT FOUND
[     (2)  FOUND

SURINS:     JUMP          .               [ENTRY
            MDAR          SYMBF           [ANY PREFIX ON SYMBOL ?
            LSIR          SURINS          [YES, RETURN (CAN'T BE AN INTRNS SUB)

            MDAR'H        SYMB2           [TWO-WORD SYMBOL ?
            JPLS          SURI2           [YES, SKIP

            MDAR'F        INS1T           [NO, LOOK-UP IN ONE-WORD TABLE
            JPSR          BSUR1
            MDAR'F        INS1E
            MDIR          SURINS          [NOT FOUND, RETURN (1)
            MDIR'X        SURINS          [FOUND, RETURN (2)

SURI2:      MDAR'F        INS2T           [LOOK-UP IN TWO-WORD INTRINSIC
            JPSR          BSUR2           [  SUBROUTINE TABLE
            MDAR'F        INS2E
            MDIR          SURINS          [NOT FOUND, RETURN (1)
            MDIR'X        SURINS          [FOUND, RETURN (2)


[ SEARCH FOR FORTRAN SYMBOL
[   RETURNS ...
[     (1)  NOT FOUND
[     (2)  FOUND

SURSYM:     JUMP          .               [ENTRY
            MDAR'H        SYMB3           [THREE-WORD SYMBOL ?
            JPLS          GSER1           [YES, ERROR (TOO LONG)

            ARMD          SMTYF           [CLEAR SYMBOL TYPE FLAG
            MDAR'H        SYMB2           [TWO-WORD SYMBOL ?
            JPLS          SURS2           [YES, SKIP

            MDAR'F        SMTB1           [NO, LOOK-UP IN ONE-WORD SYMBOL TABLE
            JPSR          SURC1
            MDAR          SYMB1
            MDIR          SURSYM          [NOT FOUND, RETURN (1)
            JUMP          SURS3           [FOUND, JUMP TO GET SYMBOL TYPE

SURS2:      MDAR'F        SMTB2           [LOOK-UP IN TWO-WORD SYMBOL TABLE
            JPSR          SURC2
            MDAR          SYMB1
            MDAR          SYMB2
            MDIR          SURSYM          [NOT FOUND, RETURN (1)

SURS3:      MDAR'I        SURP            [SYMBOL FOUND, FETCH FLAGS
            ARLS          3               [SHIFT IN SYMBOL TYPE
            MDAR'A        C7              [MASK
            ARMD          SMTYF           [SAVE SYMBOL TYPE
            MDIR'X        SURSYM          [AND RETURN (2)

SMTB1:                    0               [ONE-WORD SYMBOL TABLE
SMTB2:                    0               [TWO-WORD SYMBOL TABLE
SMTYF:                    0               [SYMBOL TYPE FLAG


[ STORE CURRENT SYMBOL IN SYMBOL TABLE

STSYM:      JUMP          .               [ENTRY
            MDAR'H        SYMB2           [TWO-WORD SYMBOL ?
            LSAR          C1              [YES, SET FOR 5 WORDS NEEDED
            MDAS'F        4               [ELSE, ONLY 4 WORDS
            ARMD          .+2             [SAVE NO. WORDS REQUIRED FOR ENTRY
            JPSR          GFREE           [GET THAT MUCH FREE CORE
                          0

            ARMD          SURP1           [SAVE NEW ENTRY POINTER
            ARXO'F                        [CLEAR ...
            ARMD'I        SURP1           [  BLOCK/OFFSET WORD
            ARMD'I'X      SURP1           [  VALUE WORD
            MDAR          SURP            [FETCH LINK TO NEXT SYMBOL
            ARMD'I'X      SURP1           [SAVE IN ENTRY (WITH FLAGS = 0)
            MDAR'I        SURP2           [FETCH PREVIOUS LINK WORD
            MDAR'A'H      AMASK           [MASK FLAG BITS
            MDAR'O        SURP1           [COMBINE LINK TO THIS ENTRY
            ARMD'I        SURP2           [RESTORE PREVIOUS LINK
            MDAR          SURP1           [SAVE POINTER TO NEW SYMBOL'S
            ARMD          SURP            [  LINK WORD

            MDAR'H        SYMB1           [GET FIRST NAME WORD
            ARMD'H'I'X    SURP1           [STORE IN ENTRY
            MDAR'H        SYMB2           [ANY 2ND NAME WORD ?
            LSIR          .-2             [YES, STORE IN ENTRY
            MDIR          STSYM           [RETURN


[ DEFINE SYMBOL

DFSYM:      JUMP          .               [ENTRY
            ARMD          TM1             [SAVE TABLE POINTER
            MDAS'F'N      1               [DECREMENT TO VALUE WORD
            ARMD          TM2             [SAVE VALUE POINTER
            MDAS'F'N      1               [DECREMENT TO 2ND CHAIN WORD
            ARMD          TM3
            MDAR          OLOC            [OUTPUT DROPPED ?
            ANIR          DFSYM           [YES, RETURN, NO ACTION

            MDAR'I        TM1             [ELSE, FETCH FLAGS
            MDAR'O        CB6             [SET DEFINED BIT
            ARMD'I        TM1             [SAVE NEW FLAGS
            ARAR'K'F                      [GET SYMBOL TYPE
            MDAR'A'F      70              [MASK
            MDXO'F        50              [IMAGE ?
            MDAR'O        ADPTF           [AND NOT IN ADEPT MODE ?
            ARMD          TM4             [NO, SET FLAG
            JPLS          .+4             [AND SKIP

            MDAR'N        OLOC            [YES, DECREMENT OLOC TO TRUE ADDRESS
            MDAS'F        1
            ARMD'N        OLOC

            MDAR'I'H'N    TM1             [REFERENCED DOUBLE-WORD ?
            MDAR'A'F      10
            JPLS          .+3             [NO, SKIP

            MDAR'I        TM3             [YES, FETCH TWO-WORD CHAIN
            JPSR          CHAN2           [AND CHAIN IT BACK

            MDAR'I'H'N    TM1             [REFERENCED NORMAL ?
            MDAR'A'F      20
            JPLS          .+3             [NO, JUMP TO SET DEFINED

            MDAR'I        TM2             [FETCH SINGLE WORD CHAIN
            JPSR          CHAIN           [CHAIN IT BACK

            MDAR'I        TM2             [NO, FETCH VALUE WORD
            MDAR'A'H      AMASK           [MASK OUT CHAIN ADDRESS
            MDAR'O        OLOC            [COMBINE CURRENT LC
            ARMD'I        TM2             [SAVE IN VALUE WORD
            MDAR          TM4             [IMAGE ?
            LSIR          DFSYM           [NO, RETURN

            ARAR'X        OLOC            [YES, RESTORE TRUE LC
            MDIR          DFSYM           [RETURN


[ DEFINE STATEMENT LABEL

DFLBL:      JUMP          .               [ENTRY
            MDAR          DFLBF           [LABEL ALREADY DEFINED ?
            ANIR          DFLBL           [YES, RETURN

            ARMD'O        DFLBF           [ELSE, SET LABEL DEFINED
            JPSR          LSLOC           [SAVE LOCATION COUNTER FOR LISTING
            MDAR          LABEL           [ANY STATEMENT LABEL ?
            ANIR          DFLBL           [NO, RETURN

            MDAR'N        OLOC            [YES, OUTPUT STOPPED ?
            JPAN          DFLB2           [NO, SKIP

            MDAR'I        LABEL           [YES, SET LABEL DEFINED
            MDAR'O        CB6             [TO AVOID END OF COMPILE ERROR
            ARMD'I        LABEL
            MDAR          LABEL           [FETCH LABEL TABLE POINTER
            MDAS'F'N      1               [DECREMENT TO VALUE WORD
            ARMD          TM1             [SAVE POINTER
            MDAR'I        TM1             [SET VALUE = 0
            MDAR'A'H      AMASK
            ARMD'I        TM1

DFLB2:      MDAR          LABEL           [FETCH LABEL TABLE POINTER
            JPSR          DFSYM           [DEFINE LABEL AT CURRENT LOC
            MDAR'I'B'N    LABEL           [LABEL REFERENCED IN AN ADDR CONST ?
            ARAR'B'F
            JPAN          DFLB1           [NO, SKIP

            MDAR          LABEL           [YES, FETCH PTR TO LABEL ENTRY
            MDAS'F'N      1               [DECREMENT TO RELCON POINTER WORD
            ARMD          TM1             [SAVE POINTER
            MDAR'I'H      TM1             [FETCH POINTER TO ADDRESS CONSTANT
            MDAR'A'F      77777           [MASK
            ARMD          TM1             [SAVE
            MDAR          OLOC            [FETCH CURRENT LC
            MDAR'O'H      C40             [COMBINE JUMP INSTR
            ARMD'I'X      TM1             [STORE IN RELOC CONST TABLE

DFLB1:      MDAR'I'K      LABEL           [FETCH LABEL FLAGS
            ARAR'B'N'F                    [REFERENCED IN A READ/WRITE ?
            ANIR          DFLBL           [NO, OK, RETURN

            MDAR'B        KEYFG           [YES, FETCH KEYWORD FLAGS
            ARAR'B'F                      [FORMAT STATEMENT ?
            ANIR          DFLBL           [YES, OK, RETURN

            JPSR          ERROR           [NO, WARNING ERROR
                          ER72            [  (LABEL SHOULD BE ON A FORMAT)

            MDAR'I'H      LABEL           [GET LABEL FLAGS
            MDXO'A        C143            [MASK OUT READ/WRITE BITS
            MDXO'A'K      C2              [MASK OUT FORMAT BIT
            ARMD'I'H      LABEL           [SAVE NEW FLAGS
            MDIR          DFLBL           [RETURN

DFLBF:                    0               [CURRENT LABEL DEFINED FLAG
LBLTB:                    0               [STATEMENT LABEL TABLE
LABEL:                    0               [CURRENT STATEMENT LABEL POINTER


[ GET STATEMENT LABEL AND LOOKUP IN LABEL TABLE

GLABL:      JUMP          .               [ENTRY (1ST DIGIT IN SCHAR)
            JPSR          GNUM            [COLLECT DIGITS
            JUMP          .+1             [AND STOP ON DECIMAL POINT

            MDAR          NUMCT           [ANY SIGNIFICANT DIGITS ?
            LSAS'N        C5              [AND FIVE OR LESS ?
            JPAN          .+3             [YES, OK, SKIP

            JPSR          ERROR           [ELSE, FATAL ERROR
                          ER104           [  (ILLEGAL STATEMENT LABEL)

            JPSR          GINTN           [GET INTEGER VALUE
            JPSR          STLBL           [STORE IN LABEL TABLE
            MDIR          GLABL           [RETURN (TABLE PTR IN AR)


[ STORE STATEMENT LABEL IN LABEL TABLE

STLBL:      JUMP          .               [ENTRY
            ARMD          STLB9           [SAVE LABEL VALUE
            MDAR'F        LBLTB           [LOOKUP IN LABEL TABLE
            JPSR          SURC1
            MDAR          STLB9
            JUMP          .+3             [SKIP IF NOT FOUND

            MDAR'I'N      SURP            [DEFINED IN PREVIOUS SUBPROGRAM ?
            JPAN          STLB1           [NO, OK, JUMP TO RETURN POINTER

            JPSR          GFREE           [NOT FOUND, GET 3 FREE WORDS
                          3
            ARMD          SURP1           [SAVE POINTER
            ARXO'F                        [CLEAR CHAIN WORD
            ARMD'I        SURP1
            MDAR          SURP            [FETCH LINK TO NEXT ENTRY
            ARMD'I'X      SURP1           [SAVE AS NEW LINK
            MDXO'I        SURP2           [CLEAR OUT PREVIOUS LINK
            MDAR'O        SURP1           [AND SET IN NEW LINK
            ARMD'I        SURP2

            MDAR          SURP1           [SAVE NEW ENTRY POINTER
            ARMD          SURP
            MDAR          STLB9           [FETCH LABEL VALUE
            ARMD'I'X      SURP1           [AND STORE

STLB1:      MDAR          SURP            [FETCH LABEL TABLE POINTER TO AR
            MDIR          STLBL           [AND RETURN

STLB9:                    0               [TEMP STORAGE


[ GET TEMPORARY VARIABLE

GTEMP:      JUMP          .               [ENTRY
            MDAR'I        TEMPT           [GET POINTER TO NEXT TEMP VARIABLE
            JPLS          GTEM1           [JUMP IF ANY

            JPSR          GFREE           [ELSE, GET 2 FREE WORDS FOR NEXT
                          2               [  TEMP VARIABLE
            ARMD          TM1             [SAVE TABLE POINTER
            ARXO'F                        [CLEAR BOTH WORDS
            ARMD'I        TM1
            ARMD'I'X      TM1
            MDAR'I        TEMPT           [FETCH PREVIOUS LINK WORD
            MDAR'O        TM1             [COMBINE LINK TO NEW ENTRY
            ARMD'I        TEMPT           [SAVE LAST LINK WORD

GTEM1:      MDAR'A        AMASK           [MASK POINTER TO NEXT TEMP VARIABLE
            ARMD          TEMPT           [ENSTATE AS CURRENT
            MDIR          GTEMP           [RETURN

TEMTB:                    0               [TEMP STORAGE TABLE HEAD
TEMPT:                    0               [CURR TEMP TABLE POINTER


[ OUTPUT TEMPORARY VARIABLE ALLOCATIONS

OTEMP:      JUMP          .               [ENTRY (HEAD OF CHAIN PTR IN AR)
            ARMD          TEMPT           [RELEASE THIS CHAIN FROM THE TABLE
            ARMD          TEMDO           [ALSO DO STORAGE
            MDAR'I        TEMPT           [FETCH PTR TO FIRST TEMP ON CHAIN
            JUMP          OTMP2+1         [JUMP INTO LOOP

OTMP1:      ARMD          OTMP9           [SAVE PTR TO NEXT TEMP TABLE ENTRY
            MDAS'F'N      1               [DECREMENT TO VALUE WORD
            ARMD          OTMP8           [AND SAVE POINTER
            MDAR'I'H      OTMP9           [FETCH NEXT LINK POINTER
            MDAR'A'H      AMASK           [MASK
            ARMD'H        OTMP7           [SAVE
            MDXO'I'H      OTMP9           [REFERENCED IN THIS SUBPROGRAM ?
            JPLS          .+2             [YES, CONTINUE
            JUMP          OTMP2           [NO, SKIP

            MDAR          OTMP9           [FETCH TEMP TABLE POINTER
            JPSR          DFSYM           [DEFINE TEMP VARIABLE AT CURRENT LC
            JPSR          SKPLC           [SKIP ONE LOCATION
            MDAR          ENDFG           [LAST SUBPROGRAM ?
            JPAN          OTMP2           [YES, SKIP (LEAVE TEMPS FOR RLSYMS)

            ARMD'I        OTMP8           [ELSE, CLEAR VAL WORD IN TABLE ENTRY
            MDAR          OTMP7           [FETCH LINK WORD
            ARMD'I        OTMP9           [CLEAR OUT FLAGS IN TEMP TABLE

OTMP2:      MDAR          OTMP7           [ANY MORE TEMP VARIABLES ?
            JPLS          OTMP1           [YES, LOOP FOR NEXT

            MDIR          OTEMP           [ELSE, RETURN


OTMP9:                    0               [TEMP STORAGE ...
OTMP8:                    0
OTMP7:                    0


[ GET RELOCATABLE CONSTANT ENTRY

GRLCT:      JUMP          .               [ENTRY
            MDAR'I        RLCTP           [ANY MORE AVAILABLE ENTRIES ?
            JPLS          GRLC1           [YES, SKIP

            JPSR          GFREE           [NO, GET FREE CORE FOR 3 WORDS
                          3
            ARMD          TM1             [SAVE POINTER
            ARXO'F                        [CLEAR LINK WORD
            ARMD'I'X      TM1
            MDAR'I        RLCTP           [GET PREVIOUS TOP OF TABLE
            MDAR'O        TM1             [COMBINE LINK TO NEW ENTRY
            ARMD'I        RLCTP           [AND STORE

GRLC1:      MDAR'A        AMASK           [MASK NEW TOP POINTER
            ARMD          RLCTP           [AND SAVE
            MDAS'F'N      1               [DECREMENT TO CHAIN WORD
            ARMD          TM1             [AND SAVE POINTER
            ARXO'F
            ARMD'I        TM1             [CLEAR CHAIN WORD
            MDAR'I'X      TM1             [FETCH LINK WORD
            MDAR'A        AMASK           [CLEAR FLAGS
            ARMD'I        TM1             [AND SAVE
            ARXO'F                        [CLEAR VALUE WORD
            ARMD'I'X      TM1
            MDAR          RLCTP           [FETCH TABLE POINTER
            MDIR          GRLCT           [AND RETURN

RLCTB:                    0               [RELOCATABLE CONSTANTS TABLE
RLCTP:                    0               [POINTER TO LAST ENTRY IN TABLE


[ STORE ONE-WORD CONSTANT IN CONSTANT TABLE

STCON:      JUMP          .               [ENTRY
            ARMD          STCO9           [SAVE VALUE
            MDAR'F        CNTB2           [LOOKUP IN TWO-WORD CONSTANT TABLE
            JPSR          SURC1
            MDAR          STCO9
            JUMP          .+2             [SKIP IF NOT FOUND
            JUMP          STCO2           [ELSE, JUMP TO RETURN WITH PTR IN AR

            MDAR'F        CNTB1           [LOOKUP IN ONE-WORD TABLE
            JPSR          SURC1
            MDAR          STCO9
            JUMP          .+2             [SKIP IF NOT FOUND
            JUMP          STCO2           [FOUND, JUMP TO RETURN

            ARXO'L                        [CLEAR FLAG FOR ONE-WORD TABLE
STCO1:      MDAR          C1              [SET FLAG FOR TWO-WORD TABLE
            ARMD'N        STCO7           [SAVE TABLE FLAG
            MDAS'F        3               [SET FOR 3 OR 4 WORDS FOR TABLE ENTRY
            ARMD          .+2             [SAVE IN CALL
            JPSR          GFREE           [GET FREE CORE
                          3
            ARMD          SURP1           [SAVE POINTER
            ARXO'F                        [CLEAR REFERENCE WORD
            ARMD'I        SURP1
            MDAR'I        SURP2           [FETCH PREV LINK WORD
            MDAR'A'H      AMASK           [MASK OUT OLD LINK
            MDAR'O'X      SURP1           [SET IN LINK TO NEW ENTRY
            ARMD'I        SURP2           [SAVE PREV LINK
            MDAR          SURP            [FETCH LINK TO NEXT ENTRY
            ARMD'I        SURP1           [SAVE IN NEW ENTRY'S LINK
            MDAR          SURP1           [FETCH TABLE POINTER
            ARMD          SURP            [SAVE FOR INDEXING
            MDAR          STCO9           [FETCH CONSTANT VALUE
            ARMD'I'X      SURP1           [STORE IN TABLE
            MDAR'X'H'N    STCO7           [TWO-WORD CONSTANT ?
            JPAN          STCO2           [NO, SKIP

            MDAR          STCO8           [YES, FETCH 2ND WORD VALUE
            ARMD'I'X      SURP1           [STORE IN TABLE

STCO2:      MDAR          SURP            [FETCH TABLE POINTER TO AR
            MDIR          STCON           [AND RETURN

CNTB1:                    0               [ONE-WORD CONSTANTS TABLE
CNTB2:                    0               [TWO-WORD CONSTANTS TABLE

STCO9:                    0               [TEMP STORAGE ...
STCO8:                    0
STCO7:                    0


[ STORE TWO-WORD CONSTANT

STCN2:      JUMP          .               [ENTRY
            ARMD          STCO9           [SAVE 1ST WORD VALUE
            MDIR'I        STCN2           [FETCH 2ND WORD VALUE
            ARMD          STCO8           [SAVE
            MDAR'X        STCN2           [INDEX ENTRY-POINT
            ARMD          STCON           [AND SAVE FOR RETURN FROM STCON

            MDAR'F        CNTB2           [LOOKUP IN TWO-WORD CONSTANT TABLE
            JPSR          SURC2
            MDAR          STCO9
            MDAR          STCO8
            JUMP          STCO1           [NOT FOUND, JUMP TO STORE
            JUMP          STCO2           [FOUND, JUMP TO RETURN


[ ALLOCATE STORAGE FOR VARIABLE

ALVAR:      JUMP          .               [ENTRY
            ARMD          ALV99           [SAVE POINTER TO SYMBOL
            JPSR          DFSYM           [DEFINE IT AT CURRENT LC
            JPSR          SKPLC           [SKIP ONE LOC FOR STORAGE
            MDAR'I        ALV99           [FETCH SYMBOL'S FLAGS
            MDAR'O        CB2             [SET SYMBOL TYPE = VARIABLE
            ARMD'I        ALV99           [SET NEW SYMBOL TYPE
            MDAR          ALV99           [FETCH SYMBOL POINTER
            JPSR          GDTYP           [GET SYMBOL'S DATA TYPE
            MDAS'F'N      4               [TWO-WORD DATA TYPE ?
            ANIR          ALVAR           [NO, RETURN

            JPSR          SKPLC           [YES, SKIP ANOTHER LOC
            MDIR          ALVAR           [AND RETURN

ALV99:                    0               [TEMP STORAGE


[ SWAP A SYMBOL WITH DUPLICATE FOLLOWING SYMBOL IN TABLE

SWAP:       JUMP          .               [ENTRY
            MDAR'A        AMASK           [MASK FIRST SYMBOL POINTER
            ARMD          SWAP9           [SAVE
            MDAR'I        SWAP9           [GET DUPLICATE SYMBOL POINTER
            MDAR'A        AMASK           [MASK
            ARMD          SWAP8           [SAVE
            MDXO'I        SWAP9           [CLEAR OUT LINK TO DUPLICATE
            ARMD'I        SWAP9           [AND SAVE FIRST SYMBOL'S FLAGS
            MDAR'I        SWAP8           [FETCH DUPLICATE'S LINK WORD
            MDAR'A        AMASK           [MASK
            MDAR'O'I      SWAP9           [COMBINE WITH FIRST SYMBOLS'S FLAGS
            ARMD'I        SWAP9           [AND SAVE NEW LINK IN FIRST SYMBOL
            MDAR'I        SWAP8           [FETCH DUPLICATE'S LINK WORD
            MDAR'A'H      AMASK           [MASK OUT OLD LINK
            MDAR'O        SWAP9           [COMBINE WITH LINK TO FIRST SYMBOL
            ARMD'I        SWAP8           [SAVE IN DUPLICATE'S LINK WORD

            JPSR          FDSIN           [INITIALIZE FDSYM ROUTINE

SWAP1:      JPSR          FDSYM           [GET NEXT SYMBOL
            JUMP          .               [  (SHOULD NOT GET TO END OF TABLES)

            MDAR'I        FDSLP           [FETCH LINK TO FOUND SYMBOL
            MDXO          SWAP9           [SAME AS FIRST OF SWAP PAIR ?
            JPLS          SWAP1           [NO, LOOP FOR NEXT SYMBOL

            MDAR'O        SWAP8           [YES, CHANGE TO POINT TO DUPLICATE
            ARMD'I        FDSLP           [AND UPDATE PREVIOUS LINK
            MDIR          SWAP            [RETURN

SWAP8:                    0               [TEMP STORAGE ...
SWAP9:                    0


[ INITIALIZE FOR FINDING SYMBOLS

FDSIN:      JUMP          .               [ENTRY
            ARMD'O        FDSFG           [SET FLAG FOR ONE-WORD TABLE
            MDAR'F        SMTB1           [FETCH LINK TO ONE-WORD SYMBOL TABLE
            ARMD          FDSMP           [ENSATE INITIAL POINTER
            MDIR          FDSIN           [RETURN


[ FIND NEXT SYMBOL

FDSYM:      JUMP          .               [ENTRY
            MDAR          FDSMP           [FETCH PREVIOUS SYMBOL PTR

FDSY1:      ARMD          FDSLP           [SAVE PTR TO LAST SYMBOL LINK
            MDAR'I        FDSLP           [FETCH LINK TO NEXT SYMBOL
            JPLS          FDSY2           [END OF TABLE ?

            MDAR'X        FDSFG           [YES, DONE BOTH TABLES ?
            LSIR          FDSYM           [YES, RETURN (1)

            MDAR'F        SMTB2           [NO, FETCH LINK TWO-WORD SYMBOL TABLE
            JUMP          FDSY1           [LOOP FOR NEW TABLE

FDSY2:      MDAR'A        AMASK           [MASK POINTER TO NEXT SYMBOL
            ARMD          FDSMP           [SAVE NEW POINTER
            ARMD          TM1             [ALSO FOR INDEXING

            MDAR'I'X      TM1             [FETCH 1ST NAME WORD
            ARMD          FDSM1           [SAVE
            MDAR'N        FDSFG           [TWO-WORD TABLE ?
            LSAR'I'X      TM1             [YES, FETCH 2ND NAME WORD
            ARMD          FDSM2           [SAVE
            MDAR'I'H      FDSMP           [FETCH SYMBOL FLAGS
            MDIR'X        FDSYM           [RETURN (2)

FDSFG:                    0               [TABLE FLAG
FDSMP:                    0               [CURRENT FOUND SYMBOL POINTER
FDSLP:                    0               [PREVIOUS LINK POINTER
FDSM1:                    0               [CURRENT SYMBOL NAME WORD 1
FDSM2:                    0               [CURRENT SYMBOL NAME WORD 2


[ CHECK TYPE OF CHARACTER
[   RETURNS (WITH WORD FROM CHRTB IN CHTYF) ...
[     (1)  SPECIAL
[     (2)  NUMERIC
[     (3)  ALPHABETIC

CHTYP:      JUMP          .               [ENTRY
            ARMD          TM1             [SAVE CHAR IN AR
            MDAE'L                        [ADD INTSRUCTION TO FETCH TABLE WORD
CHTY1:      MDAR          CHRTB
            ARIR'F                        [FETCH TABLE WORD
            ARMD          CHTYF           [SAVE IN CHARACTER TYPE FLAG
            JPAN          .+3             [SPECIAL ?

            ARAR'B'N'X    CHTYP           [NO, INDEX RETURN
            ANAR'X        CHTYP           [NUMERIC, INDEX RETURN

            MDAR          TM1             [RESTORE AR
            MDIR          CHTYP           [RETURN

CHTYF:                    0               [CHARACTER TYPE FLAG


[ SET IMPLICIT DATA TYPE OF CHARACTER(S)

SCHTY:      JUMP          .               [ENTRY
            MDAR'I        SCHTY           [FETCH DATA TYPE CODE
            ARMD          TM1             [SAVE
            MDAR'I'X      SCHTY           [FETCH FIRST CHAR CODE
            MDAE'F        CHRTB           [COMPUTE ADDRESS IN CHAR TABLE
            ARMD          TM2             [SAVE
            MDAR'I'X      SCHTY           [FETCH LAST CHAR CODE
            MDAE'F        CHRTB+1         [COMPUTE ADDR IN TABLE (PLUS 1)
            ARMD          TM3             [SAVE

SCHT1:      MDAR'I'H      TM2             [FETCH NEXT TABLE WORD
            MDXO'A        C7              [MASK OUT OLD DATA TYPE
            MDAR'O        TM1             [PLUNK IN NEW TYPE
            ARMD'I'H      TM2             [SAVE TABLE WORD
            MDAR'X        TM2             [INDEX TABLE POINTER
            MDXO          TM3             [DONE ALL CHARS ?
            JPLS          SCHT1           [NO, LOOP FOR NEXT

            MDIR'X        SCHTY           [YES, RETURN


[ GET (AND SET IF NECESSARY) DATA TYPE OF A SYMBOL

GDTYP:      JUMP          .               [ENTRY
            ARMD          TM1             [SAVE SYMBOL ENTRY POINTER
            ARMD          TM2             [ALSO FOR INDEXING
            MDAR'I'H      TM1             [FETCH SYMBOL'S FLAGS
            MDAR'A        C7              [MASK DATA TYPE FIELD
            LSIR          GDTYP           [IF SET, RETURN WITH DATA TYPE IN AR

            MDAR'I'X'K    TM2             [ELSE, FETCH 1ST CHAR OF NAME WORD
            MDAR'A        C77             [MASK
            MDAE'L                        [COMPUTE FETCH FROM CHAR TABLE
            MDAR'H        CHRTB
            ARIR'F                        [GET DATA TYPE FOR STARTING LETTER
            MDAR'A        C7              [MASK
            MDAR'O'I'H    TM1             [SET IN SYMBOL'S FLAGS
            ARMD'I'H      TM1
            MDAR'A        C7              [MASK DATA TYPE
            MDIR          GDTYP           [RETURN


[ GET SYMBOL LENGTH

GLENG:      JUMP          .               [ENTRY
            ARMD          TM1             [SAVE SYMBOL POINTER
            MDAR'I'K      TM1             [FETCH SYMBOL'S TYPE
            MDAR'A'F      70              [MASK
            MDXO'F        20              [ARRAY ?
            JPLS          GLEN1           [NO, SKIP TO SET LENGTH = 1

            MDAR          TM1             [YES, GET SYMBOL PTR
            MDAS'F'N      1               [DECREMENT TO VALUE WORD
            ARMD          TM2             [SAVE
            MDAR'I'H      TM2             [GET DIM TABLE POINTER
            MDAR'A'F      77777           [MASK
            ARMD          TM2             [SAVE
            MDAR'I'X      TM2             [GET ARRAY LENGTH
            JUMP          .+2

GLEN1:      MDAR          C1              [VARIABLE, SET LENGTH = 1

            ARMD          TM3             [SAVE LENGTH
            MDAR          TM1             [FETCH SYMBOL POINTER
            JPSR          GDTYP           [GET ITS DATA TYPE
            MDAS'F'N      4               [TWO-WORD DATUM ?
            JPAN          .+3

            MDAR'B        TM3             [YES, FETCH 2*LENGTH
            MDIR          GLENG           [AND RETURN

            MDAR          TM3             [NO, FETCH LENGTH
            MDIR          GLENG           [RETURN


[ GET FREE CORE FOR PERMANENT TABLE STORAGE

GFREE:      JUMP          .               [ENTRY
            MDAR'N        FREEP           [FETCH ADDR OF NEXT FREE LOC
            ARMD'N        TM1             [SAVE
            MDAS'I'N      GFREE           [ADD NO. OF WORDS REQUIRED
            MDAE          PFREP           [.LT. UPPER TABLE LIMIT ?
            JSAN          ERROR           [NO, TERMINAL ERROR
                          ER15            [  (COMPILER TABLES FULL)

            MDAE'N        PFREP           [YES, GET NEW FREE CORE POINTER
            ARMD'N        FREEP           [SAVE
            MDAR          TM1             [FETCH ADDRESS
            MDIR'X        GFREE           [RETURN

FREEP:                    0               [FREE CORE POINTER
HFREP:                    0               [START OF WORKING STORAGE TABLE
PFREP:                    0               [TOP OF POLISH STACK STORAGE
LCORE:                    0               [SAVED START OF USABLE FREE CORE
HCORE:                    0               [CORE LIMIT (+1)


[ GET GREE CORE FOR WORKING STORAGE (IN HIGH-CORE)

HFREE:      JUMP          .               [ENTRY
            MDAR          HFREP           [FETCH START OF WORKING CORE
            MDAS'I'N      HFREE           [SUBTRACT NO. OF WORDS REQUIRED
            MDAE'N        FREEP           [WOULD OVERWRITE PERMANENT STORAGE ?
            JSAN          ERROR           [YES, TERMINAL ERROR
                          ER99            [  (NOT ENOUGH WORKING STORAGE)
            MDAE          FREEP           [ELSE, COMPUTE NEW WORKING START
            ARMD          HFREP           [SAVE NEW POINTER
            ARMD          PFREP           [ALSO AS START OF POLISH STACK
            MDIR'X        HFREE           [AND RETURN


[ UNALLOCATE CORE

FREUP:      JUMP          .               [ENTRY
            MDAR          TLDSV           [CORE ALLOCATED ?
            JPLS          .+2             [YES, SKIP

            MDIR          FREUP           [NO, RETURN

.TLD:       ARMD          $TLD            [RESTORE START OF CORE AFTER RETURN
.LD:        ARMD          $LD             [ALSO AS START OF USABLE CORE
            ARXO'F                        [CLEAR CORE ALLOCATED FLAG
            ARMD          TLDSV
            MDIR          FREUP           [RETURN

TLDSV:                    0               [$TLD SAVE (AND CORE ALLOCATED FLAG)


[ CHARACTER PACKING ROUTINE

PCH:        JUMP          .               [ENTRY
            MDAR'A        C77             [MASK AMOS CHAR IN AR
            ARMD          TM1             [SAVE
            MDAR'X        PCHCT           [READY FOR NEW WORD ?
            JPLS          PCH1            [NO, SKIP

            MDAR'F        4               [YES, SETUP COUNT FOR 4 MORE CHARS
            ARMD'N        PCHCT
            MDAR          TM1             [FETCH NEW CHAR
            ARMD          PCHWD           [SAVE AS 1ST IN NEW WORD
            MDIR'X        PCH             [RETURN (2)

PCH1:       MDAR'K        PCHWD           [ROTATE PACKING WORD ONE CHAR
            MDAR'O        TM1             [COMBINE NEW CHAR
            ARMD          PCHWD           [SAVE
            MDAR'N        PCHCT           [WORD FULL ?
            LSIR'X        PCH             [NO, RETURN (2)

            MDAR          PCHWD           [YES, FETCH WORD TO AR
            MDIR          PCH             [AND RETURN (1)

PCHCT:                    0               [PACKING COUNT
PCHWD:                    0               [PACKING WORD


[ FILL OUT LAST PACKING WORD

PCHFL:      JUMP          .               [ENTRY
            ARMD          TM2             [SAVE FILL CHAR
            MDAR'N        PCHCT           [ANY WORD ?
            JPLS          .+2             [YES, SKIP

            MDIR'X        PCHFL           [NO, RETURN (2)

PCHF1:      MDAR          TM2             [FETCH FILL CHAR
            JPSR          PCH             [PACK IT
            MDIR          PCHFL           [ON WORD FULL, RETURN (1)
            JUMP          PCHF1           [LOOP UNTIL DONE


[ DISPATCH ON 6-BIT VALUE IN AR

DSPCH:      JUMP          .               [ENTRY
            MDAR'A        C77             [MASK ARG CHAR
            ARMD          TM1             [SAVE

DSPC1:      MDAR'I        DSPCH           [FETCH NEXT DISPATCH
            ANIR'X        DSPCH           [IF END, RETURN (NO MATCH)

            ARAR'H'X      DSPCH           [ELSE, ROTATE ARG AND INDEX TO NEXT
            MDXO          TM1             [MATCH ?
            JPLS          DSPC1           [NO, LOOP FOR NEXT CHECK

            MDAS'F        40              [YES, FORM JUMP INSTRUCTION
            ARIR'H'F                      [AND EXECUTE


[ OPERATOR/OPERAND RECOGNIZER FOR EXPRESSION SCAN
[   RETURNS ...
[      (1)  SYMBOL
[      (2)  NON-TEXT CONSTANT (RECDT=DATA TYPE, VALUE IN AR)
[      (3)  HOLLERITH OR ASCII CONSTANT (RECHF=-0 IF HOLL, NO. WORDS IN AR)
[      (4)  STATEMENT LABEL CONSTANT (LABEL TABLE PTR IN AR)
[      (5)  OPERATOR (OPNUM IN AR)

RECOG:      JUMP          .               [ENTRY
            ARXO'F                        [SET DATA TYPE = 0 FOR CONSTANTS
            ARMD          RECDT

            MDAR          RECF1           [PERIOD OP'TOR SCANNED LAST TIME ?
            JPAN          REC51           [YES, JUMP TO PROCESS

            JPSR          GSYM            [GET NEXT SYMBOL
            JUMP          REC40           [SPECIAL, JUMP TO PROCESS
            JUMP          REC1            [NUMERIC, SKIP

            ARMD'O        GCSSV           [ELSE, SAVE DELIMETER
            MDIR          RECOG           [AND RETURN (1), SYMBOL

REC1:       MDAR          SYMBF           [ADDRESS CONSTANT ?
            JPLS          REC60           [YES, JUMP TO PROCESS


[ PROCESS NUMERICAL CONSTANT ...

            JPSR          GNUM            [COLLECT DIGITS
            NOOP                          [  (DECIMAL POINT OK)
            JUMP          REC7            [JUMP IF NO DECIMAL POINT

            MDAR          NUMPF           [ANY DECIMAL PLACES ?
            JPLS          REC5            [YES, JUMP

            MDAR          SCHAR           [ELSE, FETCH DELIMETER
            JPSR          CHTYP           [CHECK ITS TYPE
            JUMP          REC6            [SPECIAL, MUST BE REAL W/OUT EXPONENT
            NOOP                          [CAN'T BE DIGIT
            
            JPSR          DSPCH           [ELSE, DISPATCH ON DELIMETER ...
            ]E!H          REC2            [  "E", NEEDS FURTHER CHECKING
            ]D!H          REC11           [  "D", DOUBLE PRECISION W/EXPONENT
            ]F!H          REC20           [  "F", DECIMAL FRACTION
            -0
            JUMP          REC3            [OTHER, MUST BE PERIOD OPERATOR

REC2:       JPSR          GCS             [".E" DELIMETER, GET ONE MORE CHAR
            JPSR          CHTYP           [CHECK ITS TYPE
            JUMP          REC4            [  SPECIAL, MUST BE + OR -
            JUMP          REC4            [  NUMERIC, MUST BE EXPONENT

            ARMD'O        RECF2           [ELSE, MUST BE ".EQ.", SET "E" SAVED

REC3:       ARMD'O        RECF1           [SET PERIOD SAVED
            JUMP          REC8            [JUMP FOR INTEGER

REC4:       ARMD'O        GCSSV           [SAVE FIRST CHAR AFTER "E"
            JUMP          REC22           [JUMP FOR REAL WITH EXPONENT

REC5:       MDAR          SCHAR           [DISPATCH ON DELIM (DEC WITH PLACES)
            JPSR          DSPCH
            ]E!H          REC22           [  REAL WITH EXPONENT
            ]D!H          REC11           [  DOUBLE-PRECISION WITH EXPONENT
            ]F!H          REC20           [  DECIMAL FRACTION
            -0

REC6:       ARMD'O        GCSSV           [ELSE, SAVE DELIMETER
            JUMP          REC21           [JUMP FOR REAL W/OUT EXPONENT

REC7:       MDAR          SCHAR           [DISPATCH ON DELIMETER (NO DECIMAL)
            JPSR          DSPCH
            ]E!H          REC22           [  REAL WITH EXPONENT
            ]D!H          REC11           [  DOUBLE-PRECISION WITH EXPONENT
            ]F!H          REC9            [  OCTAL FRACTION
            ]B!H          REC10           [  OCTAL INTEGER
            ]O!H          REC10           [  OCTAL INTEGER
            ]H!H          REC73           [  HOLLERITH
            ]L!H          REC72           [  HOLLERITH
            ]R!H          REC71           [  HOLLERITH
            ]K!H          REC75           [  ASCII
            -0

REC8:       ARMD'O        GCSSV           [OTHER, SAVE DELIM FOR NEXT TIME
            ARAR'X        RECDT           [SET DATA TYPE CODE TO INTEGER
            JPSR          GINTN           [EVALUATE
            MDIR'X        RECOG           [RETURN (2), CONSTANT

REC9:       MDAR          C3              [WHOLE FRACTION,
            ARMD          RECDT           [  SET DATA TYPE = FRACTION

REC10:      JPSR          GOCTN           [EVALUATE OCTAL
            MDIR'X        RECOG           [RETURN (2), CONSTANT

REC11:      JPSR          ERROR           [DOUBLE-PRECISION, WARNING ERROR
                          ER107           [  (NOT YET IMPLEMENTED)
            JUMP          REC22           [TREAT AS REAL WITH EXPONENT


[ EVALUATE FLOATING-POINT OR FRACTION NUMBER ...

REC20:      ARMD'O        REC99           [SET FRACTION FLAG
            ARXO'F                        [CLEAR EXPONENT FLAG
            ARMD          REC98
            JUMP          REC23           [JUMP INTO REAL ROUTINE

REC21:      ARXO'L                        [REAL WITH NO EXPONENT
REC22:      ARXO'N'F                      [REAL WITH EXPONENT
            ARMD          REC98
            ARXO'F                        [CLEAR FRACTION FLAG
            ARMD          REC99

[ SIMULATE 4EINP ...

REC23:      ARMD          4SA1            [CLEAR EXPONENT VALUE
            ARMD          4SC             [CLEAR EXPONENT SIGN
            MDAR          NUMPF           [ANY DIGITS AFTER DECIMAL POINT ?
            ANAR          C0              [NO, SET DECIMAL COUNT = 0
            ARMD          4SB             [SAVE DECIMAL COUNT

            MDAR          NUMCT           [FETCH COUNT OF SIGNIFICANT DIGITS
            MDAS'F'N      8.              [MORE THAN 8 ?
            JPAN          REC24           [NO, SKIP

            MDAS'N        4SB             [YES, TOO MANY DIGITS, ADJUST DEC CNT
            JPAN          .+3             [SKIP IF LOSING FRACTION DIGITS

            ARMD          4SA1            [ELSE, SET INITIAL EXPONENT
            ARXO'N'F                      [SET FOR NO DECIMAL COUNT

            ARMD'N        4SB             [SAVE ADJUSTED DECIMAL COUNT
            JPSR          ERROR           [WARNING ERROR
                          ER109           [  (TOO MANY SIGNIFICANT DIGITS)
            MDAR          C10             [SET NO. SIGNIFICANT DIGITS = 8
            ARMD          NUMCT

REC24:      JPSR          GINTN           [EVALUATE INTEGER MANTISSA
            ARMD          4SA2            [SAVE VALUE

            MDAR'N        REC98           [EXPONENT ?
            JPAN          REC27           [NO, SKIP

            JPSR          GCS             [GET NEXT CHARACTER
            JPSR          CHTYP           [CHECK ITS TYPE ...
            JUMP          .+3             [  SPECIAL, GO CHECK FOR SIGN
            JUMP          REC26           [  DIGIT, GO EVALUATE EXPONENT
            JUMP          ILGCH           [  ELSE, ILLEGAL

            JPSR          DSPCH           [CHECK EXPONENT SIGN ...
            ]+!H          REC25           [  "+", IGNORE
            ]-!H          REC25-1         [  "-", SKIP
            -0
            JUMP          ILGCH           [  OTHER, ILLEGAL

            ARMD'O        4SC             [SET EXPONENT SIGN = -0

REC25:      JPSR          GCS             [GET NEXT CHARACTER
            JPSR          CHTYP           [CHECK IT ...
            JUMP          ILGCH           [  SPECIAL, ILLEGAL
            JUMP          .+2             [  DIGIT, OK
            JUMP          ILGCH           [  OTHER, ILLEGAL

REC26:      JPSR          GNUM            [COLLECT DIGITS IN EXPONENT VALUE
            MDIR'X        GNUM            [TREAT DECIMAL POINT AS DELIMETER
            NOOP

            ARMD'O        GCSSV           [SAVE DELIMETER
            JPSR          GINTN           [EVALUATE INTEGER EXPONENT
            MDXO          4SC             [ADJUST FOR SIGN
            MDAS          4SA1            [ADD TO INITIAL EXPONENT
            ARMD'N        4SA1            [SAVE EXPONENT VALUE NEGATED
            MDAR'A        CB0             [GET SIGN FLAG
            ANAR'N        C0
            ARMD          4SC             [SAVE
            JPAN          .+3             [OK IF NEGATIVE

            MDAR          4SA1            [ELSE, SET EXPONENT POSITIVE
            ARMD'N        4SA1

REC27:      JPSR          4PACK           [LEFT JUSTIFY NUMBER VALUE
            JUMP          .-1

            MDAR          4SA2            [FETCH MANTISSA VALUE
            ARAR'H'O'F                    [ZERO ?
            JSLS          4DTOB           [NO, CONVERT TO FLOATING POINT
            ARMD          4SA1            [SAVE VALUE

            ARAR'X        RECDT           [INDEX DATA TYPE TO REAL
            ARAR'X        RECDT
            MDAR          REC99           [FRACTION ?
            JPAN          REC28           [YES, SKIP

            MDAR          4SA1            [ELSE, FETCH VALUE TO AR
            MDIR'X        RECOG           [RETURN (2), CONSTANT

REC28:      ARAR'X        RECDT           [INDEX DATA TYPE TO FRACTION
            MDAR          4SA1            [GET FLOATING-POINT VALUE
            JPSR          4RTF            [CONVERT REAL TO FRACTION
            MDIR'X        RECOG           [RETURN (2), CONSTANT


[ PROCESS SPECIAL CHARACTER ...

REC40:      MDAR          SCHAR           [FETCH SPECIAL CHARACTER
            JPSR          DSPCH           [DISPATCH ON SPECIAL ...
            ].!H          REC52           [  MANY POSSIBILITIES
            ]'!H          REC69           [  QUOTED HOLLERITH
            13!H          REC68           [  QUOTED ASCII
            ]*!H          REC41           [  * OR **
            ]/!H          REC42           [  / OR //
            ](!H          REC43           [  LEFT PAREN
            ])!H          REC44           [  RIGHT PAREN
            ],!H          REC45           [  COMMA
            ]-!H          REC46           [  MINUS
            ]+!H          REC47           [  PLUS
            ]=!H          REC48           [  EQUALS
            15!H          REC49           [  C/R
            -0
            JUMP          ILGCH           [  OTHER, ILLEGAL SYNTAX


[ PROCESS SPECIAL OPERATORS ...

REC41:      JPSR          GCS             ["*", GET NEXT CHAR
            MDXO'F        ]*              ["**" ?
            LSIR          CHSAV           [NO, SAVE CHARACTER
            LSAR          C1              [AND SET TO RETURN OPNUM = 11
            MDAS'F        10              [YES, SET OPNUM = 10
            JUMP          REC57           [JUMP TO RETURN

REC42:      JPSR          GCS             ["/", GET NEXT CHAR
            MDXO'F        ]/              ["//" ?
            LSIR          CHSAV           [NO, SAVE CHAR
            LSAR'N        C1              [AND SET TO RETURN OPNUM = 12
            MDAS'F        13              [YES, SET OPNUM = 13
            JUMP          REC57           [JUMP TO RETURN

REC43:      MDAR'F        3               [LEFT PAREN, OPNUM = 3
            JUMP          REC57

REC44:      MDAR'F        5               [RIGHT PAREN, OPNUM = 5
            JUMP          REC57

REC45:      MDAR'F        6               [COMMA, OPNUM = 6
            JUMP          REC57

REC46:      MDAR'F        16              [MINUS, OPNUM = 16 (ASSUME UNARY)
            JUMP          REC57

REC47:      MDAR'F        7               [PLUS, OPNUM = 7 (ASSUME UNARY)
            JUMP          REC57

REC48:      MDAR'F        36              [EQUAL SIGN, OPNUM = 36
            JUMP          REC57

REC49:      MDAR'F        4               [C/R, OPNUM = 4
            JUMP          REC57


[ PROCESS PERIOD ...

REC51:      ARMD'N        RECF1           [IF PERIOD SAVED, CLEAR FLAG
            MDAR'N        RECF2           [".E" SCANNED LAST TIME ?
            JPAN          REC53           [NO, SKIP

            ARMD          RECF2           [YES, CLEAR FLAG
            JPSR          GCS             [AND GET NEXT CHAR
            MDXO'F        ]Q              ["Q" ?
            JPLS          REC54           [NO, ILLEGAL

            MDAR'F        SPCEQ+1         [YES, FETCH PTR TO SPEC OP TABLE
            ARMD          BSURP           [SAVE AS IF FOUND BY SEARCH
            JPSR          GCS             [GET DELIMETER
            JUMP          REC56           [JUMP TO COMPLETE

REC52:      JPSR          GNUM            [FIRST, CHECK IF PRECEDES A CONSTANT
            NOOP
            NOOP
            MDAR          NUMPF           [ANY DIGITS AFTER DECIMAL ?
            JPLS          REC5            [YES, JUMP TO PROCESS CONSTANT

            ARMD'O        GCSSV           [ELSE, SAVE DELIMETER

REC53:      JPSR          GS              [GET OPERATOR SYMBOL
            JUMP          ILGCH           [  SPECIAL, ILLEGAL
            NOOP                          [  CAN'T BE DIGIT
            JUMP          REC55           [  ONE-WORD, OK
            NOOP                          [  TWO-WORD OR THREE-WORD ...

REC54:      JPSR          ERROR           [FATAL ERROR
                          ER108           [  (PERIOD OPERATOR NOT RECOGNIZED)

REC55:      MDAR'F        SPCOT           [SEARCH FOR SYMBOL IN SPECIAL
            JPSR          BSUR1           [  OPERATOR TABLE
            MDAR'F        SPCOE
            JUMP          REC54           [NOT FOUND, JUMP FOR ERROR

REC56:      MDAR          SCHAR           [DELIMETER = "." ?
            MDXO'F        ].
            JPLS          ILGCH           [NO, ILLEGAL

            MDAR          C4              [SET DATA TYPE = LOGICAL
            ARMD          RECDT
            MDAR'I        BSURP           [OPERATOR ?
            JPAN          REC57           [YES, JUMP TO RETURN OPERATOR NUMBER

            LSAR'N        C1              [ELSE, MUST BE LOGICAL CONSTANT
            MDIR'X        RECOG           [EXTEND SIGN AND RETURN (2)

REC57:      ARAR'X        RECOG           [OPERATOR FOUND,
            ARAR'X        RECOG           [INDEX RETURN
            ARAR'X        RECOG
            MDIR'X        RECOG           [AND RETURN (5), WITH OPNUM IN AR


[ PROCESS STATEMENT LABEL CONSTANT ...

REC60:      MDAR'A'F      10              ["#" PREFIX ?
            JPLS          GSER2           [YES, ILLEGAL SYNTAX

            JPSR          GLABL           [ELSE, ADDR CONS, GET LABEL VALUE
            ARMD'O        GCSSV           [SAVE DELIMETER
            JUMP          REC57+1         [JUMP TO RETURN (4)


[ SPECIAL OPERATOR TABLE ...

SPCOT:      TEXT          /A/             40000!H 26
            TEXT          /AND/           40000!H 26
            TEXT          /B/             40000!H 33
SPCEQ:      TEXT          /EQ/            40000!H 17
            TEXT          /F/             0
            TEXT          /FALSE/         0
            TEXT          /GE/            40000!H 22
            TEXT          /GT/            40000!H 21
            TEXT          /H/             40000!H 35
            TEXT          /K/             40000!H 34
            TEXT          /L/             40000!H 31
            TEXT          /LE/            40000!H 24
            TEXT          /LT/            40000!H 23
            TEXT          /N/             40000!H 25
            TEXT          /NE/            40000!H 20
            TEXT          /NOT/           40000!H 25
            TEXT          /O/             40000!H 27
            TEXT          /OR/            40000!H 27
            TEXT          /R/             40000!H 32
            TEXT          /T/             77776
            TEXT          /TRUE/          77776
            TEXT          /X/             40000!H 30
            TEXT          /XOR/           40000!H 30

SPCOE = .


[ PROCESS ASCII CONSTANT ...

REC68:      ARXO'F                        [QUOTED ...
            ARMD          RECHF           [  CLEAR HOLLERITH FLAG
            ARMD          GASCF           [  AND LOWER CASE FLAG
            MDAR'F        13              [FETCH END CHARACTER
            JUMP          REC70           [AND JUMP INTO HOLLERITH ROUTINE


[ PROCESS HOLLERITH CONSTANT ...

REC69:      ARXO'F                        [QUOTED, SET FILLER = 0
            ARMD          REC99
            ARMD'O        RECHF           [SET FLAG FOR HOLLERITH CONSTANT
            MDAR'F        ]'              [AND SET END CHARACER FLAG

REC70:      ARMD          GHOLF           [  FOR GHOLC ROUTINE
            JUMP          REC76           [JUMP INTO PACKING ROUTINE

REC71:      ARMD'O        REC99           ["R", SET NO FILLER
            JUMP          REC74           [AND SKIP

REC72:      ARXO'L                        ["L", SET FILLER = 0
REC73:      MDAR          C40             ["H", SET FILLER = BLANK
            ARMD          REC99           [SAVE HOLLERITH FILLER FLAG

REC74:      ARXO'N'L                      [SET FLAG FOR HOLLERITH CONSTANT
REC75:      ARXO'F                        [CLEAR FLAG FOR ASCII CONSTANT
            ARMD          RECHF           [SAVE
            ARMD          GASCF           [ALSO CLEAR ASCII LOWER CASE FLAG

            JPSR          GINTN           [EVALUATE INTEGER CHARACTER COUNT
            ARMD'N        GHOLF           [SAVE CHAR COUNT
            LSAS'N        C777            [ZERO OR .GT. 777 ?
            JPAN          .+3             [YES, OK, SKIP

            JPSR          ERROR           [ELSE, FATAL ERROR
                          ER105           [  (HOLLERITH COUNT TOO LARGE)

REC76:      MDAR          FREEP           [FETCH FREE CORE POINTER
            ARMD          REC98           [SAVE
            ARMD'O        GHOLS           [SET NO SAVED HOLLERITH CHARACTER

REC77:      JPSR          GFREE           [GET ONE FREE WORD TO STORE CONSTANT
                          1
            ARMD          REC97           [SAVE POINTER TO TABLE WORD

            MDAR          RECHF           [HOLLERITH ?
            JPAN          REC78           [YES, SKIP

            JPSR          GASCW           [NO, GET NEXT ASCII WORD
            JUMP          REC81           [JUMP IF LAST
            JUMP          REC79           [ELSE, SKIP TO SAVE

REC78:      JPSR          GHOLW           [GET NEXT AMOS WORD
            JUMP          REC80           [JUMP IF LAST

REC79:      ARMD'I        REC97           [SAVE WORD IN FREE CORE
            JUMP          REC77           [LOOP FOR NEXT

REC80:      MDAR          REC99           [LOW-ORDER FILL ?
            JPAN          .+3             [NO, SKIP
            JPSR          PCHFL           [ELSE, FILL OUT WORD
            NOOP

            MDAR          PCHWD           [FETCH FINAL WORD TO AR

REC81:      ARMD'I        REC97           [SAVE LAST WORD
            MDAR          REC98           [FETCH FIRST ADDRESS OF STRING
            MDAE'N'X      REC97           [COMPUTE NO. OF WORDS NEGATED
            ARAR'N'X      RECOG           [GET NO. WORDS IN AR
            MDIR'X        RECOG           [AND RETURN (3)


RECF1:                    0               [LAST PERIOD FLAG
RECF2:                    0               [".E" SCANNED LAST FLAG

RECDT:                    0               [CONSTANT DATA TYPE
RECHF:                    0               [HOLLERITH CONSTANT FLAG

REC99:                    0               [TEMP STORAGE
REC98:                    0               [TEMP STORAGE
REC97:                    0


